" assumes that integrals are already set "
" and need a little adjustment to find baseline "


$fast='slow'  " only the slow adjustment performed "

if $#=1 then
  if $1='fast' then $fast='fast'
  elseif $1='slow' then $fast='slow'
  else $fast='mid' endif
endif

f full vp=12

" store all the original integral setpoints "

$numregs=0
numreg:$numregs
$a=1
repeat
  $right[$a]=0 $left[$a]=0
  getreg($a):$right[$a],$left[$a]
  $a=$a+1
until $a>$numregs

cz

$intmodnow='' $intmodnow=intmod
intmod='full'

" move to side of setpoints till next point is higher "

$high=0 $low=0 $position=0
$a=1
repeat
  sp=$right[$a] wp=$left[$a]-$right[$a]
  sp=$right[$a]-20 wp=$left[$a]-$right[$a]+40
  cr=$left[$a] 

  $position=cr
  repeat
    integ(cr,cr+0.5):$low
    integ(cr-0.5,cr):$high
    if $low>=$high then cr=$left[$a]+100 else $high=$low $position=cr endif
    cr=cr+0.5
  until  cr>$left[$a]+20
  $left[$a]=$position

  cr=$right[$a]
  $position=cr
  repeat
    integ(cr-0.5,cr):$low
    integ(cr,cr+0.5):$high
    if $low>$high then cr=$right[$a]-100 else $high=$low $position=cr endif
    cr=cr-0.5
  until cr<$right[$a]-20
  $right[$a]=$position
  $a=$a+1
until $a>$numregs
intmod=$intmodnow

"  Prevent overlapping of the integral setpoints  "

$a=1
repeat
    if $a>1 then
      if $right[$a-1]<$left[$a] then 
        r1=($right[$a-1]+$left[$a])/2 $right[$a-1]=r1 $left[$a]=r1 
      endif
    endif
    z($left[$a],$right[$a])
    $a=$a+1
until $a>$numregs

f intmod='partial'

" **************************************************************** "
" ************ new section to macro for fine adjustment ********** "
" **************************************************************** "

if $fast<>'fast' then

  if fn>np then $res=sw/fn*2 else $res=sw/np*2 endif

  r1=5/$res 
 
  if $fast='slow' then  r2=trunc(r1/100) else r2=trunc(r1/25) endif

  if r2>1 then $res=$res*r2 endif

  f full vp=12
  $sp=sp $wp=wp sp=sp+0.5p wp=wp-1p 
  $setslope=0
  $numregs=0
  numreg:$numregs
  if $numregs=0 then write('line3','no integrals established') return endif

  " memorize setpoints "
  $a=1
  repeat
    $left[$a]=0 $right[$a]=0 $maxht[$a]=0
    getreg($a):$right[$a],$left[$a]
    sp=$right[$a] wp=$left[$a]-$right[$a] peak:$maxht[$a]
    $a=$a+1
  until $a>$numregs

  cz

  $intmodnow='' $intmodnow=intmod
  intmod='full'

  $midpoint=5 $endpoint=$midpoint*2-1


  " ******************************************************** "
  " determine slope of data points at the integral set point "
  " ******************************************************** "

  " ******************************************************** "
  "              left setpoint adjustment                    "
  " ******************************************************** "
  $number_left=$numregs

  write('line3','adjusting integral setpoints')

  $count=1

  repeat
    $number_left?
    sp=$left[$count]-$midpoint*$res wp=2.5+$midpoint*$res
    $a=1
    $delta=$res $f=sp+wp
    repeat
      $pos[$a]=$f  $ht[$a]=0  mark($f):$ht[$a]
      $f=$f-$delta
      $a=$a+1
    until $f<sp

    $numpts=$a-1


    $start=$numpts-$endpoint
    repeat  " this moves midpt of $endpoint point data set till slope is near zero "
      $A=0  $B=0  $C=0  $D=0  $E=0

      $a=$start   $b=0
      repeat
        $A=$A+1
        $B=$B+$a
        $C=$C+$a*$a
        $D=$D+$ht[$a]
        $E=$E+$ht[$a]*$a
        $b=$b+1
        $a=$a+1
      until $a>$start+$endpoint

      $num1=1/$B    $num2=-1/$C  $denom=$A/$B-$B/$C
      $rat1=$num1/$denom  $rat2=$num2/$denom
      $num3=-1/$A   $num4=1/$B   $denom2=$C/$B-$B/$A
      $rat3=$num3/$denom2 $rat4=$num4/$denom2

      $intercept1=$rat1*$D+$rat2*$E
      $slope1=($rat3*$D+$rat4*$E)/$maxht[$count]
      if $slope1>$setslope then 
        $left[$count]=$pos[$start+$midpoint] 
        $start=$start-1  
        $stop=0
      else $stop=1 
      endif

    until $start<1 or $stop=1



    " ******************************************************** "
    "              right setpoint adjustment                   "
    " ******************************************************** "

    wp=2.5+$midpoint*$res 
    sp=$right[$count]+$midpoint*$res-wp

    $a=1
    $delta=$res $f=sp+wp
    repeat
      $pos[$a]=$f  $ht[$a]=0  mark($f):$ht[$a]
      $f=$f-$delta
      $a=$a+1
    until $f<sp

    $numpts=$a-1
    $start=1

    repeat
      $A=0  $B=0  $C=0  $D=0  $E=0

      $a=$start $b=0
      repeat
        $A=$A+1
        $B=$B+$a
        $C=$C+$a*$a
        $D=$D+$ht[$a]
        $E=$E+$ht[$a]*$a
        $b=$b+1
        $a=$a+1
      until $a>$start+$endpoint


      $num1=1/$B    $num2=-1/$C  $denom=$A/$B-$B/$C
      $rat1=$num1/$denom  $rat2=$num2/$denom
      $num3=-1/$A   $num4=1/$B   $denom2=$C/$B-$B/$A
      $rat3=$num3/$denom2 $rat4=$num4/$denom2

      $intercept1=$rat1*$D+$rat2*$E
      $slope1=($rat3*$D+$rat4*$E)/$maxht[$count]
      if $slope1<-1*$setslope then 
        $right[$count]=$pos[$start+$midpoint]    
        $start=$start+1  
        $stop=0 
      else $stop=1  
      endif

    until $stop=1 or $start>$numpts-$endpoint

    $count=$count+1
    $number_left=$number_left-1
  until $count>$numregs

endif   " end of slower and more accurage section when $fast is not fast "

cz

"  Prevent overlapping of the integral setpoints  "

$a=1
repeat
    if $a>1 then
      if $right[$a-1]<$left[$a] then 
        r1=($right[$a-1]+$left[$a])/2 $right[$a-1]=r1 $left[$a]=r1 
      endif
    endif
    z($left[$a],$right[$a])
    $a=$a+1
until $a>$numregs

f 
sp=$right[$numregs]-50 wp=$left[1]-$right[$numregs]+100
intmod='partial'
ds


