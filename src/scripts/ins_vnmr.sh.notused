#! /bin/sh
# 
# Agilent Technologies All Rights Reserved.
# This software contains proprietary and confidential
# information of Agilent Technologies and its contributors.
# Use, disclosure and reproduction is prohibited without
# prior consent.
#
#ins_vnmr.sh , the former i_vnmr.3j.sh

#-----------------------------------------------


nnl_echo() {
    if test x$sysV = "x"
    then
        echo "error in echo-no-new-line: sysV not defined"
        exit 1
    fi

    if test $sysV = "y"
    then
        if test $# -lt 1
        then
            echo
        else
            echo "$*\c"
        fi
    else
        if test $# -lt 1
        then
            echo
        else
            echo -n $*
        fi
    fi
}

#-----------------------------------------------
update_user_group() {

   test_file="/tmp/testfile_willberemoved"
   touch $test_file
   chgrp $nmr_group $test_file 2>/dev/null
   if [ $? -ne 0 ]
   then
       if [ x$os_version = "xwin" ]
       then
	  $src_code_dir/win/bin/groupadd $nmr_group
       else
	  /usr/sbin/groupadd  -g $nmr_group_no $nmr_group
       fi
   elif [ x$os_version != "xwin" ]
   then
       nmr_group_no=`grep "^${nmr_group}:" /etc/group | awk 'BEGIN { FS = ":" } { print $3}'`
   fi

   #Only copy the passwd file if there is no nmr_adm account

   chown $nmr_adm $test_file 2>/dev/null
   if [ $? -ne 0 ]
   then
       if [ x$os_version = "xrht" ]
       then
           /usr/sbin/useradd -d$nmr_home/$nmr_adm -s/bin/csh -g$nmr_group $nmr_adm
           chmod 755 "$nmr_home/$nmr_adm"
           /usr/bin/passwd -f -u $nmr_adm 2>/dev/null
       elif [ x$os_version = "xwin" ]
       then
	   if [ ! -d "$nmr_home" ]
	   then
	     mkdir $nmr_home
	   fi
	   chmod 775 $nmr_home
           "$src_code_dir"/win/bin/useradd -d"$nmr_home"/$nmr_adm -s/bin/csh -g$nmr_group $nmr_adm
       else
           add_to_passwd
       fi

       #special stuff for Solaris

       if [ x$ostype = "xSOLARIS" ]
       then
           if touch /etc/shadow
           then
               if grep -s $nmr_adm /etc/shadow >/dev/null
               then
                   :
               else
                   echo "$nmr_adm:::0:::::" >>/etc/shadow
               fi
           else
               echo "Cannot add $name to the shadow file"
           fi
       fi
   elif [ x$os_version = "xwin" ]
   then
      nmrhomedir=`"$src_code_dir"/win/bin/getuserinfo "$nmr_adm" | awk 'BEGIN {FS=";"} {print $2}'`
      echo "$nmrhomedir"
      if [ x"$nmrhomedir" = "x" -o x"$nmrhomedir" = "x " ]
      then
	if [ ! -d "$nmr_home" ]
	then
	    mkdir "$nmr_home"
	fi
	mkdir "$nmr_home/$nmr_adm"
	homedir=`unixpath2win "$nmr_home/$nmr_adm"` 
	net user "$nmr_adm" /homedir:"$homedir"
      fi
   fi
   rm -f $test_file

   #if windows, then add the vnmrj adminstrator to Administrators group
   if [ x$os_version = "xwin" ]
   then
	net localgroup Administrators | grep $nmr_adm  2>/dev/null
	if [ $? -ne 0 ]
	then
	    "$src_code_dir"/win/bin/groupadd Administrators $nmr_adm
	fi
   fi
}

#-----------------------------------------------
add_to_passwd() {

# make backup copy of password file
# scan password file for largest user-id
# add one to that user-id to obtain id for vnmr1
# insert before last line in password file
# keep user-id number within bounds of positive 16-bit numbers,
#  that is, less than 32768

   echo "add_to_passwd() ---"

   awk '
      BEGIN { N=0
              AlreadyExists=0
              NewUser="'$nmr_adm'"
              FS=":"
      }

      {
        if ($3>N && $3<32768) N=$3
        if ($1==NewUser) AlreadyExists=1
      }

      END { if (AlreadyExists==0)
            printf "%s::%d:'$nmr_group_no':%s:'$nmr_home'/%s:/bin/csh\n",NewUser,N+1,NewUser,NewUser
      }
   ' < /etc/passwd >/tmp/newuser

   #Insert new entry before the last line in the password file

   if [ -s /tmp/newuser ]
   then
      echo "add_to_passwd():add new entry ----"
      cp /etc/passwd /etc/passwd.bk
      read stuff </tmp/newuser
      (sed '$i\
'"$stuff"'' /etc/passwd >/tmp/newpasswd)
      mv /tmp/newpasswd /etc/passwd
      chmod 644 /etc/passwd
      rm /tmp/newuser
   fi
}

#-----------------------------------------------
change_procpar() {
  for proc in $nproc
  do
    cp $proc /tmp/proc_tmp
    cat /tmp/proc_tmp | sed 's/4 "a" "n" "s" "y"/2 "n" "y"/' | \
    sed 's/9 "c" "f" "g" "m" "p" "r" "u" "w" "x"/5 "c" "f" "n" "p" "w"/' > $proc
  done
  rm /tmp/proc_tmp 
}
 
#ch_mod() {
#    if [ x$ostype = "xIRIX" -o x$ostype = "xIRIX64" ]
#    then
#	find $* -exec chmod 644 {} \;
#    else
#	chmod -R 644 $*
#    fi
#    chmod 755 $*
#}

#ch_xmod() {
#    if [ x$ostype = "xIRIX" -o x$ostype = "xIRIX64" ]
#    then
#	find $* -exec chmod 755 {} \;
#    else
#	chmod -R 755 $*
#    fi
#}

domanuals()
{
   dir_now=`pwd`
   dir_from="$source_dir"/$1
   if [ $2 -eq 1 ]
   then
      dir_from=`dirname "$dir_from"`/imaging
   fi
   if [ ! -d "$dest_dir"/acrobat ]
   then
      (su $nmr_adm -fc "mkdir $dest_dir/acrobat")
   fi
   cd "$dest_dir"/acrobat
   if [ -d online ]
   then
      rm -rf online
   fi
   if [ x$man_link = "xyes" ]
   then
      if test ! "x$nmr_adm" = "x"
      then
         (su $nmr_adm -fc "ln -s $src_code_dir/acrobat/online online")
      else
         ln -s "$src_code_dir"/acrobat/online online
      fi
   else
      if [ ! -d online ]
      then
         (su $nmr_adm -fc "mkdir online")
      fi
      if test ! "x$nmr_adm" = "x"
      then
         (su $nmr_adm -fc "cp -rp  $dir_from/*  online")
      else
         cp -rp "$dir_from" online
      fi
   fi
   if [ x$ostype = "xIRIX" -o x$ostype = "xIRIX64" ]
   then
      (cd "$dest_dir"/acrobat;		\
      chown -R $nmr_adm    online/;	\
      chgrp -R $nmr_group  online/)
   fi

   cd "$dir_now"
}

#-----------------------------------------------
doacrobat()
{
   PAGER=cat
   export PAGER
   if [ x$ostype = "xIRIX" -o x$ostype = "xIRIX64" ]
   then
      destdir=$dest_dir/acrobat/sgi
   else
      if [ x$ostype = "xAIX" ]
      then
         destdir=$dest_dir/acrobat/ibm
      else
         destdir=$dest_dir/acrobat/sol
      fi
   fi

   export destdir
   if [ -d "$destdir" ]
   then
      mkdir -p "$destdir"
   fi
   cd "$destdir"
   tar xvf "$source_dir"/$tar_name
./*install/INSTALL > /dev/null  2> /dev/null << +++
y
accept
$destdir
+++
   (cd "$destdir"/..;					\
    chown -R $nmr_adm     `basename "$destdir"`;		\
    chgrp -R $nmr_group   `basename "$destdir"`)
}

update_if_dosy()
{
  if [ "x$1" = "xDOSY" ]
  then
     echo "Replaced $dest_dir/adm/users/protocolListWalkup.xml."
     if [ -f "$dest_dir"/pgsql/data/postmaster.pid ]
     then
        echo "  Updating protocols in database."
	if [ x$os_version != "xwin" ]
	then
	    su $nmr_adm -c "$dest_dir/bin/managedb updatetable protocol"
	else
	    $dest_dir/bin/managedb updatetable protocol
	fi
     fi
  fi
}

#-----------------------------------------------
load_pw_option()
{
   i=0
   n_pass=`expr $# / 2`
   load_type=${cons_type}.opt

   #console=`basename $console $opt_dir`opt
   tmp_size=0
   while [ $i -lt $n_pass ]
   do
       cat "$src_code_dir"/$os_version/$load_type | (while read line
      do
         b=`echo $line | awk 'BEGIN { FS = " " } { print $1 }'`
         if [ x$b = x$1 ]
         then
            size=`echo $line | awk 'BEGIN { FS = " " } { print $2 }'`
            c=`echo $line | awk 'BEGIN { FS = " " } { print $3 }'`
            #echo  $c $tmp_size
            #tmp_size=$size
            if [ "x$nmr_adm" != "x" ] # actually nmr_adm always set
            then
               echo "  Extracting:  \"$1\"  $c"
               (cd "$dest_dir"; \
                cp "$source_dir"/"$c" .; \
                "$src_code_dir"/decode.$os_version $2 `basename "$c"` tmp.tar;\
                rm `basename "$c"` )
	       if [ x$os_version != "xwin" ]
	       then
		 (cd "$dest_dir";su $nmr_adm -fc "tar $taroption tmp.tar" )
	       else
		 (cd "$dest_dir";tar $taroption tmp.tar )
	       fi

               i=`ls -l "$dest_dir"/tmp.tar | awk 'BEGIN { FS=" " } {print $5}'`
               if [ $i -gt 2 ]
               then
                  update_if_dosy $1
                  echo "  DONE:  $size KB."
               else
                  echo "    PASSWORD for $1 incorrect. "
                  echo "      If you have the correct password"
                  echo "      you can load the option separately"
                  echo "      when this install is complete."
                  echo "      Run load.nmr again, and only select $1"
                  echo "  SKIPPED: $size"
                  grep $1  "$dest_dir"/pw_fault
	          if [ $? -ne 0 ]
	          then
                      touch  "$dest_dir"/pw_fault
	              echo "  $1" >> "$dest_dir"/pw_fault
                  fi
               fi
               rm -f "$dest_dir"/tmp.tar
            else
               (cd "$dest_dir"; \
                cp "$source_dir"/"$c" .; \
                "$src_code_dir"/decode.$os_version $2  `basename "$c"` tmp.tar; \
                rm `basename "$c"` )
               (cd "$dest_dir";tar $taroption tmp.tar )
               i=`ls -l "$dest_dir"/tmp.tar | awk 'BEGIN { FS=" " } {print $5}'`
               if [ $i -gt 2 ]
               then
                  echo "  DONE:  $size KB."
               else
                  echo "    Password for $1 incorrect "
                  echo "      If you have the correct password"
                  echo "      you can load the option separately"
                  echo "      when this install is complete."
                  echo "      Run load.nmr again, and only select $1"
                  echo "  SKIPPED: $size"
                  grep $1  "$dest_dir"/pw_fault
	          if [ $? -ne 0 ]
	          then
                      touch  "$dest_dir"/pw_fault
	              echo "  $1" >> "$dest_dir"/pw_fault
                  fi
               fi
               rm -f "$dest_dir"/tmp.tar
            fi
         fi   
      done
      #echo " " $tmp_size
      )

      i=`expr $i + 1`
      shift; shift
   done
   echo " "

}


#
#  save the complete asm directory, for recovery of added and updated VAST files
#  tar out the present asm directory excluding the backup directories.
#  No need to keep propagating backup directories.
#
savevast()
{
#  echo  " "
#  echo  "  Backing up previous release VAST files."
#  echo " "
  /bin/rm -f /tmp/excludelist /tmp/vast.tar
#
# create the exclude list
#
  /bin/echo "./info.new" > /tmp/excludelist
  /bin/echo "./asm.this_release.bkup" >> /tmp/excludelist
  /bin/echo "./asm.previous_release.bkup" >> /tmp/excludelist
#
# tar present asm directory
#
  if [ x$os_version = "xrht" ]
  then
      (cd /vnmr/asm; /bin/tar -X /tmp/excludelist -cf /tmp/vast.tar . )
  else
      (cd /vnmr/asm; /bin/tar -cXf /tmp/excludelist /tmp/vast.tar . )
  fi
}


#
# restore the previous release VAST files
#
restorevast()
{
#  remove the temp files about to be created and used
  /bin/rm -f /tmp/nvast.tar /tmp/vastlist.prev /tmp/vastlist.latest /tmp/combolist

# just being sure that the backup directories are brand new
  /bin/rm -rf "$dest_dir"/asm/asm.this_release.bkup
  /bin/rm -rf "$dest_dir"/asm/asm.previous_release.bkup
  /bin/rm -rf "$dest_dir"/asm/info.new
  /bin/mkdir -p "$dest_dir"/asm/asm.this_release.bkup
  /bin/mkdir -p "$dest_dir"/asm/asm.previous_release.bkup
#
# tar new release asm directory
#
#ccccc
  if [ x$os_version = "xrht" ]
  then
      (cd "$dest_dir"/asm; tar -X /tmp/excludelist -cf /tmp/nvast.tar . )
  else
      (cd "$dest_dir"/asm; tar -cXf /tmp/excludelist /tmp/nvast.tar . )
  fi

#
# create an untouched backup copy of this release asm directory
# just incase the restore does damage
#
   echo "   The Original VAST files for this release are backed up in: "
   echo "        $dest_dir/asm/asm.this_release.bkup"
   (cd "$dest_dir"/asm/asm.this_release.bkup; /bin/tar -xf /tmp/nvast.tar )
 
# generate two list of whats in the present and new asm directories
   /bin/tar -tf /tmp/vast.tar > /tmp/vastlist.prev
   /bin/tar -tf /tmp/nvast.tar > /tmp/vastlist.latest
   /bin/cat /tmp/vastlist.prev /tmp/vastlist.latest | /bin/sort > /tmp/combolist

# create a unique list of files present in one but not the other
# these we will copy over to the new release asm
#  --- uniqlist maybe unique to the new or the old
   uniqlist=`/usr/bin/uniq -u /tmp/combolist`

# ---  extractlist are the unique ones in the previous release
   extractlist=
   #Don't know how to resolve this for Linux, blocked it out for now
   if [ x$os_version != "xrht" ]
   then
       extractlist=`/bin/tar -tf /tmp/vast.tar $uniqlist`
   fi

# restore (i.e. copy over the new release) racksetup and info files
   echo " "
   echo "   Restoring previous release VAST racksetup and sample files"
   (cd "$dest_dir"/asm; /bin/tar $taroption /tmp/vast.tar ./racksetup ./info );

# if there some addition files to be copied do so now
   if [ x"$extractlist" != "x" ]
   then
      echo " "
      echo "    Restoring user/system added VAST files from previous release"

      ( cd "$dest_dir"/asm; /bin/tar $taroption /tmp/vast.tar $extractlist )
      flist=` echo $extractlist | /usr/bin/tr -s '\012' " " `
      echo "      $flist"
      echo " "
      echo "     For user-added protocols and/or racks, you will need"
      echo "     manually to update the protocol.vast and racks/rackInfo files. "
      echo " "
   fi
#
# create a complete backup of the previous release files, various *.conf
# and other files may be needed if they were customized
#
   ( cd "$dest_dir"/asm/asm.previous_release.bkup; /bin/tar -xf /tmp/vast.tar )
   echo " "
   echo "    If you change any of the '.conf' or other files you will need manually"
   echo "    to reapply your changes."
   echo "    A complete backup of the previous VAST files can be found in: "
   echo "         $dest_dir/asm/asm.previous_release.bkup"
 
   /bin/rm -f /tmp/excludelist /tmp/vast.tar
   /bin/rm -f /tmp/nvast.tar /tmp/vastlist.prev /tmp/vastlist.latest /tmp/combolist
}


#-----------------------------------------------
#  Main MAIN main program starts here
#-----------------------------------------------
os_version=$1    #sol ibm sgi rht
shift            #because sh does not use $10 and up
cons_type=$1     #inova ... g2000
shift
src_code_dir=$1  #/cdom/cdrom0/code
shift
dest_dir=$1      #/export/home/vnmr
shift
nmr_adm=$1       #vnmr1
shift
nmr_group=$1     #nmr
shift
nmr_home=$1      #/space or /export/home or /
shift
vnmr_link=$1     #yes
shift
man_link=$1      #no
shift
gen_list=`echo $1 | sed 's/+/ /g'`  #agr8 or 9 is a list, items separated by a "*"
shift
opt_list=`echo $1 | sed 's/+/ /g'`

NAWK="nawk"

rootuser="root"
taroption="xpf"
sbindir="/usr/varian/sbin"

nmr_group_no=30
case x$os_version in
    xsol) 
        ostype="SOLARIS"
        file_ext="sol"
	;;

    xwin)

        file_ext=$os_version
        ostype="Interix" 
	NAWK="awk"
	rootuser="Administrator"
	src_code_dir=`/bin/ntpath2posix "${src_code_dir}"`
	dest_dir=`/bin/ntpath2posix "$dest_dir"`
	nmr_home=`/bin/ntpath2posix "$nmr_home"`
	taroption="xf"
	sbindir="$dest_dir"/.sbin
	;;

    xrht)

	if [  -r /etc/SuSE-release ]
	then
	    lflvr="suse"
	else
	    lflvr="rhat"
	fi
        #RedHat does not have nawk
        NAWK="gawk"
        file_ext=$os_version

        #group 30 in RedHat system taken by gopher
        while [ x`grep ":${nmr_group_no}:" /etc/group` != "x" ]
        do
           nmr_group_no=`expr $nmr_group_no + 1`
        done
        ;;
esac

real_console=$cons_type

if [ x$os_version = "xwin" ]
then
   domainname=`/bin/pdomain`
else
   domainname=`/bin/domainname`
fi

echo "NMR Owner = $nmr_adm"
echo "NMR Group = $nmr_group"
echo "NMR Destination directory= $dest_dir"
echo "NMR host='`/bin/hostname`' domain='$domainname'"

source_dir=`dirname "$src_code_dir"`
acq_pid=-1
 
if [ x$ostype = "xSOLARIS" ]
then
    chown_cmd="/bin/chown -h "
    chgrp_cmd="/bin/chgrp -h "
else
    chown_cmd="chown "
    chgrp_cmd="chgrp "
fi

if [ $acq_pid -ne -1 ]
then
   echo "Stopping acquisition."
   kill -2 $acq_pid
   sleep 5		# give time for kill message to show up.
fi

#and if we want to load vnmr we create entry in passwd/shadow

echo $gen_list | grep -s VNMR > /dev/null
if [ $? -eq 0 ]
then
   #echo "Checking for $nmr_adm   in password file(s)"
   #echo "Checking for $nmr_group in group file"
   if [ x$ostype = "xIRIX" -o x$ostype = "xIRIX64" ]
   then
      $src_code_dir/i_vnmr.4j $nmr_adm $nmr_group /usr/people
   else
      if [ x$ostype = "xSOLARIS" ]
      then
          echo "Updating User group and password files"
          update_user_group
          if [ x$nmr_adm != "xvnmr1" ]
	  then
	     tmp_admin=$nmr_adm
  	     nmr_adm="vnmr1"
	     update_user_group
	     nmr_adm=$tmp_admin
	  fi
      else
	  nmr_home="/home"
          update_user_group
      fi
   fi
fi

if [ ! -d "$dest_dir" ]
then
    echo "Creating '$dest_dir' directory"
    mkdir -p "$dest_dir"
else
    echo "'$dest_dir' already exist"
    if [ -d "$dest_dir"/jre ]
    then
        chmod -R u+w "$dest_dir"/jre
    fi
fi

rm -f $dest_dir/pw_fault	#just in case

cd "$dest_dir"
chmod 755 .
if [ x$os_version != "xwin" ]
then
    ${chown_cmd} $nmr_adm .
    ${chgrp_cmd} $nmr_group .
fi

if [ ! -d tmp ]
then
   mkdir tmp
   ${chown_cmd} $nmr_adm tmp
   ${chgrp_cmd} $nmr_group tmp
fi

save_p11_users="n"
configP11="no"

/bin/grep VnmrJ_SE `dirname "$src_code_dir"`/vnmrrev
if [ $? -eq 0 ]
then
    configP11="yes"
fi

cp_files="n"
load_main="n"
echo $gen_list | grep -s VNMR > /dev/null
if [ $? -eq 0 ]
then
   load_main="y"
   if [ -r /vnmr/conpar ]
   then
         cp /vnmr/conpar /tmp/conpar
         cp /vnmr/devicenames /tmp/devicenames
         rm -rf /tmp/probes /tmp/shims
         cp -r /vnmr/probes /tmp/probes
         cp -r /vnmr/shims /tmp/shims
	 rm /tmp/probes/probe.tmplt
         cp_files="y"

         if [ -r /vnmr/p11/part11Config -a x$configP11="xyes" ]
         then
             save_p11_users="y"
         fi
   fi

   if [ -r /vnmr/gshimdir ]
   then
         rm -rf /tmp/gshimdir
         cp -r /vnmr/gshimdir /tmp/gshimdir
   fi
fi

# if cp_files='y' then we are loading VNMR,
# so save gradtables and decclib directories

cp_gradtables='n'
cp_decclib='n'
cp_fastmap='n'
cp_mollib='n'
cp_corba='n'
cp_admusers='n'
cp_dicom='n'
cp_p11='n'
cp_gshimlib='n'
cp_database='n'
cp_protune='n'
cp_accounting='n'

rm -f "$dest_dir"/pw_fault

if [ x$cp_files = "xy" ]
then
      if [ -d /vnmr/imaging/gradtables ]
      then
         if [ -f imaging/coilIDs ]
         then
            (cd /vnmr; tar cf /tmp/gradtables.tar imaging/gradtables \
				imaging/coilIDs imaging/grad.tmplt)
         else
            (cd /vnmr; tar cf /tmp/gradtables.tar imaging/gradtables)
         fi
         cp_gradtables='y'
      fi
      if [ -d /vnmr/imaging/decclib ]
      then
         (cd /vnmr; tar cf /tmp/decclib.tar imaging/decclib)
         cp_decclib='y'
      fi
      if [ -d /vnmr/fastmap ]
      then
         (cd /vnmr; tar cf /tmp/fastmap.tar fastmap)
         cp_fastmap='y'
      fi
      if [ -d /vnmr/mollib ]
      then
	    (cd /vnmr; tar cf /tmp/mollib.tar mollib)
 	    cp_mollib='y'
      fi

      if [ -d /vnmr/lc ]
      then
         (cd /vnmr; tar cf /tmp/corba.tar acqqueue/*.CORBAref lc/FlowCal >/dev/null 2>/dev/null )
	 if [ "x`tar -tf /tmp/corba.tar`" = x ] ; then
	     rm /tmp/corba.tar
	 else
	     cp_corba='y'
	 fi
      fi

      if [ -d /vnmr/adm/users ]
      then
         if [ x$save_p11_users = "xy" ]
         then
             (cd /vnmr/adm;
	     if [ -f /vnmr/adm/users/profiles/protocolListWalkup.xml ]
             then
               mv /vnmr/adm/users/profiles/protocolListWalkup.xml /vnmr/adm/users/protocolListWalkup.xml
             fi
	     if [ -d /vnmr/adm/users/userProfiles ]
             then
		tar cf /tmp/admusers.tar users/group users/profiles users/userlist users/properties users/operators users/administrators users/userProfiles
	     else
		tar cf /tmp/admusers.tar users/group users/profiles users/userlist users/properties users/operators users/administrators
             fi
     	     )
         else
	     if [ x$configP11 = "xno" ]
             then
                (cd /vnmr/adm; 
                if [ -f /vnmr/adm/users/profiles/protocolListWalkup.xml ]
                then
                  mv /vnmr/adm/users/profiles/protocolListWalkup.xml /vnmr/adm/users/protocolListWalkup.xml
		 fi
		 if [ -d /vnmr/adm/users/userProfiles ]
		 then
		    tar cf /tmp/admusers.tar users/group users/profiles users/userlist users/operators users/userProfiles
		 else
		    tar cf /tmp/admusers.tar users/group users/profiles users/userlist users/operators
		 fi 
                 )
	     fi
         fi
         cp_admusers='y'
      fi
      if [ -d /vnmr/dicom/conf ]
      then
	 (cd /vnmr/dicom; tar cf /tmp/dicom.tar conf)
	 cp_dicom='y'
      fi
      if [ -d /vnmr/p11 ]
      then
         (cd /vnmr; tar cf /tmp/p11.tar p11)
         cp_p11='y'
      fi
      if ( test -d /vnmr/gshimlib)
      then
         (cd /vnmr; tar cf /tmp/gshimlib.tar gshimlib)
         cp_gshimlib='y'
      fi
      if [ -d /vnmr/pgsql/data ] && [ -d /vnmr/pgsql/persistence ]
      then
         (cd /vnmr/pgsql; tar cf /tmp/database.tar data persistence)
         cp_database='y'
      fi

      if [ -d /vnmr/tune/methods ]
      then
         # Don't copy over the standard methods or Qtune stuff,
	 # but include the probe files (which can have pretty much any name).
         cat >/tmp/tune.exclude <<EOF
tune/methods/high-coarse
tune/methods/high-fine
tune/methods/high-medium
tune/methods/lohi
tune/methods/lohi-coarse
tune/methods/lohi-fine
tune/methods/lohi-medium
tune/methods/low-coarse
tune/methods/low-fine
tune/methods/low-medium
tune/manifest
tune/manual
EOF
         (cd /vnmr; tar cfX /tmp/tune.tar /tmp/tune.exclude tune)
         cp_protune='y'
      fi

#
# accounting records
#
      if [ -d /vnmr/adm/accounting/accounts ]
      then
         (cd /vnmr; tar cvf /tmp/jaccount.tar adm/accounting/accounts)
         cp_accounting='y'
      fi
      if [ -f /vnmr/adm/accounting/gorecords.xml ]
      then
         (cd /vnmr; cp adm/accounting/gorecords.xml /tmp)
         cp_accounting='y'
      fi
      if [ -f /vnmr/adm/tmp/macrorecords.txt ]
      then
         (cd /vnmr; cp adm/tmp/macrorecords.txt /tmp)
         cp_accounting='y'
      fi
      if [ -f /vnmr/adm/accounting/gorecords_onHold.xml ]
      then
         (cd /vnmr; cp adm/accounting/gorecords_onHold.xml /tmp)
         cp_accounting='y'
      fi
      if [ -f /vnmr/adm/tmp/macrorecords_onHold.txt ]
      then
         (cd /vnmr; cp adm/tmp/macrorecords_onHold.txt /tmp)
         cp_accounting='y'
      fi
fi


cp_vast='n'
echo $opt_list | grep -s VAST > /dev/null
if [ $? -eq 0 ]
then
   if [ -d /vnmr/asm/info ]
   then
         savevast
         cp_vast='y'
   fi
fi

##############################################
#########load the generic files 
echo "-------------------"
gen_testlist=`echo "$gen_list" | tr -d " "`

# if installed by root, some of the initial files might be owned by root,
# change the permissions so that the directories created are writable 
# by the vnmr administrator
if [ x$os_version != "xwin" ]
then
   ${chown_cmd} -R $nmr_adm "$dest_dir"
   ${chgrp_cmd} -R $nmr_group "$dest_dir"
   cd "$dest_dir"
   ${chown_cmd} $nmr_adm .
   ${chgrp_cmd} $nmr_group .
   
fi

#if [ -z gen_testlist ]
if [ x"$gen_testlist" = "x" ]
then
   echo "Skipping NMR's GENERIC files"
else
   echo "Installing NMR's GENERIC files"
   temp_size=0
   tar_size=0
   did_vnmr="n"

   load_type=${cons_type}.$file_ext
   for Item in $gen_list
   do
      if [ x$Item = "x" ]
      then
      	continue
      fi
      cat "$src_code_dir"/$os_version/$load_type | \
      ( while read line
        do
           tar_cat=`echo $line | awk 'BEGIN { FS = " " } { print $1 }'`
  
           if [ x$tar_cat = x$Item ]
           then
     	      tar_size=`echo $line | awk 'BEGIN { FS = " " } { print $2 }'`
	      tar_name=`echo $line | awk 'BEGIN { FS = " " } { print $3 }'`
              temp_size=$tar_size
	      
	      if [ x$tar_name = "x" ]
	      then
		continue
	      fi

	      if (test $tar_name = "code//jre") || (test $tar_name = "code//jre.linux") || (test $tar_name = "code//jre.win")
              then
                    cd "$source_dir"
                    echo "  Extracting  \"$Item\"  $source_dir/$tar_name"
		    if [ x$os_version != "xwin" ]
		    then
			(su $nmr_adm -fc "cp -r $source_dir/$tar_name $dest_dir"/jre)
		    else
			(cp -r "$source_dir"/"$tar_name" "$dest_dir"/jre)
		    fi
		    if [ $? -ne 0 ]
                    then
                          echo "Installation of $Item failed"
                    fi
                    echo "  DONE:  $tar_size KB."
              else
                    echo "  Extracting  \"$Item\"  $source_dir/$tar_name"
		    if [ x$os_version != "xwin" ]
		    then
			(cd "$dest_dir"; su $nmr_adm -fc "tar $taroption $source_dir/$tar_name")
		    else
			(cd "$dest_dir"; tar $taroption "$source_dir"/"$tar_name")
		    fi
	            if [ $? -ne 0 ]
                    then
		       if [ x$os_version != "xwin" ]
		       then
			 (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption $source_dir/$tar_name")
		       else
			 (cd "$dest_dir"; tar $taroption "$source_dir"/"$tar_name")
		       fi
	               if [ $? -ne 0 ]
                       then
                           echo "Installation of $Item failed"
                       fi
                    fi
                    echo "  DONE:  $tar_size KB."
              fi
           fi
        done
      )

      if [ x$Item = "xVNMR" -o x$Item = "xvnmr" ]
      then
         did_vnmr="y"
      fi
   done
fi

##############################################
######### load the passworded options
echo "-------------------------" 
opt_testlist=`echo $opt_list | tr -d " "` 

#if [ -z opt_testlist ]
if [ x$opt_testlist = "x" ]
then
   echo "Skipping PASSWORDED OPTION files"
else
   echo "Installing PASSWORDED OPTION files"

   load_pw_option $opt_list
   #echo "Passworded Options Completed."
fi

echo "ALL REQUESTED SOFTWARE EXTRACTED"

################################################################
#fix some things, depending on what system we are
if [ x$did_vnmr = "xy" ]
then

   #Check if jre exists and is newer than 1.1.6, if not, load it

   if [ -x /usr/bin/jre ]
   then
      version=`/usr/bin/jre -version 2>&1 | grep Version`
      minor=`echo $version | awk 'BEGIN { FS = "." } { print $2 }'`
      sub=`echo $version | awk 'BEGIN { FS = "." } { print $3 }'`
      if [ x$minor = "x" ]
      then
         minor=1
         sub=3
      fi 
      if [ $minor -lt 2 ]
      then 
         if [ $sub -lt 6 ]
         then
            load=1
         else
            load=0
         fi
      else
         load=0
      fi
   else
      version=""
      load=1
   fi

   load_type=${cons_type}.opt

   ##########################
   echo "Reconfiguring files... "
   echo " "
   if ( test x$load_type = "xunity.opt" )
   then
      file="$dest_dir/user_templates"
      cp $file"/global" $file"/tmp"
      cat "$file"/tmp | sed 's/lockgain 1 1 48/lockgain 1 1 70/' | \
         sed 's/lockpower 1 1 68/lockpower 1 1 63/' > $file/global
      rm "$file"/tmp
      nproc=`ls "$dest_dir"/par??0/stdpar/*/procpar`
      change_procpar
      nproc=`ls "$dest_dir"/par??0/tests/*/procpar`
      change_procpar
      nproc=`ls "$dest_dir"/parlib/*/procpar`
      change_procpar
      nproc=`ls "$dest_dir"/fidlib/*/procpar`
      change_procpar

     rm -f "$dest_dir"/asm/auto.conf "$dest_dir"/asm/enter.conf "$dest_dir"/asm/experiments
     mv "$dest_dir"/asm/auto.unity "$dest_dir"/asm/auto.conf
     mv "$dest_dir"/asm/enter.unity "$dest_dir"/asm/enter.conf
     mv "$dest_dir"/asm/experiments.unity "$dest_dir"/asm/experiments
     rm -f "$dest_dir"/user_templates/dg/default/dg.conf
     mv "$dest_dir"/user_templates/dg/default/dg.unity "$dest_dir"/user_templates/dg/default/dg.conf
   fi

   
   if ( test x$load_type = "xmr400.opt" )
   then
       here=`pwd`
       cd $dest_dir/acq/download
       cp nvScript.ls nvScript
       cp nvScript.ls.md5 nvScript.md5
       cd $here
       if [ -f $dest_dir/conpar.400mr ]
       then
          mv $dest_dir/conpar.400mr $dest_dir/conpar
       fi
   else
       rm -f $dest_dir/conpar.400mr
   fi

      

   if ( test x$load_type = "xg2000.opt" -o x$load_type = "xmercury.opt" -o x$load_type = "xmercvx.opt" -o x$load_type = "xmercplus.opt" )
   then
      nproc=`ls "$dest_dir"/fidlib/*/procpar`
      change_procpar
      file="$dest_dir/glide/adm"
      if (test -f $file/public.env)
      then
         cp  "$file"/public.env "$file"/public
         cat "$file"/public | sed 's/unity/gem/' > $file/public.env
         rm "$file"/public
      fi
   fi

   if ( test x$load_type = "xmercury.opt" -o x$load_type = "xmercvx.opt" -o x$load_type = "xmercplus.opt" )
   then
      file="$dest_dir/user_templates"
      cp "$file"/global "$file"/tmp
      cat "$file"/tmp | sed 's/lockgain 1 1 48 0 1/lockgain 1 1 39 0 1/' | \
          sed 's/lockpower 1 1 68 0 1/lockpower 1 1 48 0 1/' > $file/global
      rm "$file"/tmp
   fi

   if ( test x$load_type = "xg2000.opt" )
   then
      file="$dest_dir/user_templates"
      cp "$file"/global "$file"/tmp
      cat "$file"/tmp | sed 's/lockgain 1 1 48 0 1/lockgain 1 1 30 0 10/' | \
          sed 's/lockpower 1 1 68 0 1/lockpower 1 1 40 0 1/' > $file/global
      rm "$file"/tmp

     rm -f "$dest_dir"/asm/auto.conf "$dest_dir"/asm/enter.conf "$dest_dir"/asm/experiments
     mv "$dest_dir"/asm/auto.g2000 "$dest_dir"/asm/auto.conf
     mv "$dest_dir"/asm/enter.g2000 "$dest_dir"/asm/enter.conf
     mv "$dest_dir"/asm/experiments.g2000 "$dest_dir"/asm/experiments
     rm -f "$dest_dir"/user_templates/dg/default/dg.conf
   fi

   if ( test x$load_type = "xuplus.opt" )
   then
     rm -f "$dest_dir"/asm/auto.conf "$dest_dir"/asm/enter.conf "$dest_dir"/asm/experiments
     mv "$dest_dir"/asm/auto.uplus "$dest_dir"/asm/auto.conf
     mv "$dest_dir"/asm/enter.uplus "$dest_dir"/asm/enter.conf
     mv "$dest_dir"/asm/experiments.uplus "$dest_dir"/asm/experiments
     rm -f "$dest_dir"/user_templates/dg/default/dg.conf
     mv "$dest_dir"/user_templates/dg/default/dg.uplus "$dest_dir"/user_templates/dg/default/dg.conf
   fi

   if [ x$real_console = "xg2000" ]
   then
      mv "$dest_dir"/user_templates/dg/default.g2000/* "$dest_dir"/user_templates/dg/default
   fi

# if still there, delete the following.
   rm -rf "$dest_dir"/user_templates/dg/default.g2000
   rm -rf "$dest_dir"/user_templates/dg/default/dg.unity
   rm -rf "$dest_dir"/user_templates/dg/default/dg.uplus
   rm -rf "$dest_dir"/asm/auto.g2000
   rm -rf "$dest_dir"/asm/auto.unity
   rm -rf "$dest_dir"/asm/auto.uplus
   rm -rf "$dest_dir"/asm/enter.g2000
   rm -rf "$dest_dir"/asm/enter.unity
   rm -rf "$dest_dir"/asm/enter.uplus
   rm -rf "$dest_dir"/asm/experiments.g2000
   rm -rf "$dest_dir"/asm/experiments.unity
   rm -rf "$dest_dir"/asm/experiments.uplus


   chmod 777   "$dest_dir"/tmp
   chmod 666   "$dest_dir"/acq/info
   if (test -f "$dest_dir"/bin/cptoconpar)
   then
      chmod u+s  "$dest_dir"/bin/cptoconpar
   fi
   if [ ! -d "$dest_dir"/acqqueue ]
   then
      mkdir "$dest_dir"/acqqueue
      chmod 777 "$dest_dir"/acqqueue
      if [ x$os_version != "xwin" ]
      then
	${chown_cmd} $nmr_adm "$dest_dir"/acqqueue
	${chgrp_cmd} $nmr_group "$dest_dir"/acqqueue
      fi
   fi

   if [ x$vnmr_link = "xyes" ]
   then
      cd /
      rm -f /vnmr
      ln -s "$dest_dir" /vnmr
      echo "Link '/vnmr' to VNMR Software"
   fi

   if [ x$cp_files = "xy" ]
   then
      echo "Restoring conpar and devicenames."
      mv /tmp/conpar "$dest_dir"/conpar.prev
      mv /tmp/devicenames "$dest_dir"/devicenames
      ${chown_cmd} $nmr_adm   "$dest_dir"/devicenames "$dest_dir"/conpar.prev
      ${chgrp_cmd} $nmr_group "$dest_dir"/devicenames "$dest_dir"/conpar.prev
      echo "Restoring shim and probe-calibration files"
      mv /tmp/shims/* "$dest_dir"/shims
      num_files=`ls /tmp/probes/* 2> /dev/null | wc -l`
      if [ $num_files -gt 0 ]
      then 
         mv /tmp/probes/* "$dest_dir"/probes
      fi
      ${chown_cmd} -R $nmr_adm   "$dest_dir"/shims "$dest_dir"/probes
      ${chgrp_cmd} -R $nmr_group "$dest_dir"/shims "$dest_dir"/probes

      if [ -d /tmp/gshimdir ]
      then 
         mv /tmp/gshimdir "$dest_dir"/gshimdir
         ${chown_cmd} -R $nmr_adm   "$dest_dir"/gshimdir
         ${chgrp_cmd} -R $nmr_group "$dest_dir"/gshimdir
      fi
   fi

   # Make gradtables and decclib dirs writable only by owner,
   # regardless of how they are on the CD.
   # If we have old ones, ignore new ones but set permission anyway.

   if [ x$cp_gradtables = "xy" ]
   then
      echo "Restoring gradtables."
#      rm -rf "$dest_dir"/imaging/gradtables
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/gradtables.tar")
      else
	(cd "$dest_dir"; tar $taroption /tmp/gradtables.tar)
      fi
      # replace 156_100S with 156_100_HD in coilIDs
      (  cd "$dest_dir"/imaging;
         if [ -f coilIDs ]
         then
            grep 156_100S coilIDs >  /dev/null;
            if [ $? -eq 0 ] 
            then
               sed 's/156_100S/156_100_HD/' coilIDs > coilIDs.new
               mv coilIDs.new coilIDs
               chown $nmr_adm:$nmr_group coilIDs
               rm -f gradtables/156_100S
            fi
         fi
      )

   fi
   if [ -d "$dest_dir"/imaging/gradtables ]
   then
      chmod 755 "$dest_dir"/imaging/gradtables
   fi
   if [ x$cp_decclib = "xy" ]
   then
      echo "Restoring decclib."
      rm -rf "$dest_dir"/imaging/decclib
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/decclib.tar")
      else
	(cd "$dest_dir";tar $taroption /tmp/decclib.tar)
      fi
   fi
   if [ -d "$dest_dir"/imaging/decclib ]
   then
      chmod 755 "$dest_dir"/imaging/decclib
   fi
   if [ x$cp_fastmap = "xy" ]
   then
      echo "Restoring fastmap."
      rm -rf "$dest_dir"/fastmap
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/fastmap.tar")
      else
	(cd "$dest_dir"; tar $taroption /tmp/fastmap.tar)
      fi
   fi
   if [ x$cp_vast = "xy" ]
   then
      if [ -d "$dest_dir"/asm/info ]
      then
          echo "Restoring VAST files."
          restorevast
      fi 
   fi
   if [ x$cp_mollib = "xy" ]
   then
	echo "Restoring MOL files."
	if [ x$os_version != "xwin" ]
	then
	    (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/mollib.tar")
	else
	    (cd "$dest_dir"; tar $taroption /tmp/mollib.tar)
	fi
   fi
   if [ "x$cp_corba" = "xy" ]
   then
	echo "Restoring LC files."
	if [ x$os_version != "xwin" ]
	then
	    (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/corba.tar")
	else
	    (cd "$dest_dir"; tar $taroption /tmp/corba.tar)
	fi
   fi
   if [ x$cp_admusers = "xy" ]
   then
	if [ -f /tmp/admusers.tar ]
        then
           echo "Restoring user files."
           rm -rf "$dest_dir"/adm/users/profile
           rm -rf "$dest_dir"/adm/users/group
           rm -rf "$dest_dir"/adm/users/userlist
	   if [ x$os_version != "xwin" ]
	   then
	     (cd "$dest_dir"/adm; su $nmr_adm -fc "tar $taroption /tmp/admusers.tar")
	   else
	     (cd "$dest_dir"/adm; tar $taroption /tmp/admusers.tar)
	   fi
           ( cd "$dest_dir"/adm/users/operators; 
             file="automation.conf"
             if [ -f $file ]
             then
                grep ChangeTime $file > /dev/null;
                if [ $? -ne 0 ]
                then
                    cat $file | sed 's/SampleReuse/ChangeTime		180\
SampleReuse/' > auto.conf2
                    mv auto.conf2 $file
                fi
             fi
             file="automation.en.conf"
             if [ -f $file ]
             then
                grep ChangeTime $file > /dev/null;
                if [ $? -ne 0 ]
                then
                    cat $file | sed 's/SampleReuse/ChangeTime		180\
SampleReuse/' > auto.conf2
                    mv auto.conf2 $file
                fi
             fi
             file="automation.ja.conf"
             if [ -f $file ]
             then
                grep ChangeTime $file > /dev/null;
                if [ $? -ne 0 ]
                then
                    cat $file | sed 's/SampleReuse/ChangeTime		180\
SampleReuse/' > auto.conf2
                    mv auto.conf2 $file
                fi
              fi
           )

       fi
   fi
   userDefaults="$dest_dir/adm/users/userDefaults"
   if [ -f "$userDefaults" ]
   then
      if [ x$os_version != "xwin" ]
      then
	cat "$dest_dir"/adm/users/userDefaults | sed '/^home/c\
home yes no '${nmr_home}'/$accname' > "$dest_dir"/adm/users/userDefaults.bak
    
	mv "$dest_dir"/adm/users/userDefaults.bak "$dest_dir"/adm/users/userDefaults
      fi
      if [ x$os_version != "xwin" ]
      then
	chown "$nmr_adm" "$dest_dir"/adm/users/userDefaults
      fi
   fi
   # for windows change : to ; 
   if [ x$os_version = "xwin" ]
   then
      files="templates/vnmrj/interface/dataDirDefault templates/vnmrj/interface/dataTemplateDefault templates/vnmrj/properties/studyname_templates templates/vnmrj/properties/filename_templates imaging/templates/vnmrj/properties/studyname_templates imaging/templates/vnmrj/properties/filename_templates walkup/templates/vnmrj/properties/studyname_templates walkup/templates/vnmrj/properties/filename_templates"
      for file in $files
      do
	default="${dest_dir}/$file"
	if [ -f "$default" ]
	then
	    cat "$default" | sed 's/:/;/' > "$default".bak
	    mv "$default".bak "$default"
	fi
      done
   fi
   if [ x$cp_dicom = "xy" ]
   then
      echo "Restoring dicom."
      rm -rf "$dest_dir"/dicom/conf
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"/dicom; su $nmr_adm -fc "tar $taroption /tmp/dicom.tar")
      else
	(cd "$dest_dir"/dicom; tar $taroption /tmp/dicom.tar)
      fi
   fi
   if [ x$cp_p11 = "xy" ]
   then
      echo "Restoring part11 files."

      p11Config="$dest_dir"/p11/part11Config

      lines=`grep ":checksum:" $p11Config | wc -l`

      if [ $lines != 0 ]
      then

         echo "Update part11Config file"

         cp $p11Config /tmp/part11Config

         rm -rf "$dest_dir"/p11
	 if [ x$os_version != "xwin" ]
	 then
	    (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/p11.tar")
	 else
	    (cd "$dest_dir"; tar $taroption /tmp/p11.tar)
	 fi

         lines=`grep ":checksum:" $p11Config | wc -l`

         if [ $lines = 0 ]
         then
           awk 'BEGIN {FS=":"} {if( $2=="auto" || $2=="study" || $2=="checksum") print $0}' /tmp/part11Config >> $p11Config
         fi
         rm /tmp/part11Config

      else

         rm -rf "$dest_dir"/p11
	 if [ x$os_version != "xwin" ]
	 then
	    (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/p11.tar")
	 else
	    (cd "$dest_dir"; tar $taroption /tmp/p11.tar)
	 fi

      fi

   fi
   if [ x$cp_gshimlib = "xy" ]
   then
      echo "Restoring gradient shim map files."
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/gshimlib.tar")
      else
	(cd "$dest_dir"; tar $taroption /tmp/gshimlib.tar)
      fi
   fi
   if [ x$cp_database = "xy" ]
   then
      echo "Restoring database files."
      rm -rf "$dest_dir"/pgsql/persistence
      rm -rf "$dest_dir"/pgsql/data
      if [ x$os_version != "xwin" ]
      then
	(cd "$dest_dir"/pgsql; su $nmr_adm -fc "tar $taroption /tmp/database.tar")
      else
	(cd "$dest_dir"/pgsql; tar $taroption /tmp/database.tar)
      fi
   fi

   if [ x$cp_protune = "xy" ]
   then
      echo "Restoring tune files."
      if [ x$os_version != "xwin" ]
      then
	  (cd "$dest_dir"; su $nmr_adm -fc "tar $taroption /tmp/tune.tar")
      else
	  (cd "$dest_dir"; tar $taroption /tmp/tune.tar)
      fi
   fi

   if [ x$cp_accounting = "xy" ]
   then
      echo "Restoring accounting files."
      if [ -f /tmp/jaccount.tar ]
      then
         (cd "$dest_dir"; tar xvf /tmp/jaccount.tar)
         rm /tmp/jaccount.tar
      fi
      if [ -f /tmp/gorecords.xml ]
      then
         (cd "$dest_dir"; cp /tmp/gorecords.xml adm/accounting)
         rm -f /tmp/gorecords.xml
      fi
      if [ -f /tmp/macrorecords.txt ]
      then
         (cd "$dest_dir"; cp /tmp/macrorecords.txt adm/tmp)
         rm -f /tmp/macrorecords.txt
      fi
      if [ -f /tmp/gorecords_onHold.xml ]
      then
         (cd "$dest_dir"; cp /tmp/gorecords_onHold.xml adm/accounting)
         rm -f /tmp/gorecords_onHold.xml
      fi
      if [ -f /tmp/macrorecords_onHold.txt ]
      then
         (cd "$dest_dir"; cp /tmp/macrorecords_onHold.txt adm/tmp)
         rm -f /tmp/macrorecords_onHold.txt
      fi
   fi

   # Clean up 
   rm -f /tmp/database.tar

   if [ ! -d "$dest_dir"/mollib ]
   then
	mkdir "$dest_dir"/mollib
	if [ x$os_version != "xwin" ]
	then
	    chown ${nmr_adm}:${nmr_group} "$dest_dir"/mollib
	    chmod 755 "$dest_dir"/mollib
	fi
   fi

   case $real_console in
        inova ) explist_file="explist.inova" ;;
        g2000 ) explist_file="explist.g2000" ;;
      mercury ) explist_file="explist.mercury" ;;
            * ) explist_file="explist.inova";;
   esac
   if [ -f "$dest_dir"/asm/${explist_file} ]
   then
      (cd "$dest_dir"/asm; mv -f $explist_file explist; rm -f explist.*)
   fi

   #######################################################################
   #bottom part was move in from outside of this if, need to be rechecked

   #Load individual packages only, do not need the rest
   if [ x$load_main = "xn" ]
   then
      if [ x$os_version = "xwin" ]
      then
	prim_group=`/usr/bin/id -Gn $nmr_adm | $NAWK '{print $1}'`
      else
	prim_group=`groups $nmr_adm | $NAWK '{print $1}'`
      fi
      if [ x$prim_group !=  x$nmr_group ]
      then
         echo Updating group name to ${nmr_group}...
         cd $dest_dir/..
         chgrp -hR $nmr_group "$dest_dir"
      fi

      echo "Software Installation Completed."
      exit
   fi

   if [ x$os_version != "xrht" -a x$os_version != "xwin" ]
   then
      #Use Vnmr Motif library if one not already present
      if (test ! -f /usr/dt/lib/libXm.so)
      then  
         ( cd "$dest_dir"/lib; mv libXmVnmr.so.3 libXm.so.3; ln -s libXm.so.3 libXm.so )
      fi
   fi
 
   #For Solaris 2.6 the types.h file of the GNU compiler can not be used
   #ver=`uname -r`
   #if [ $ver="5.6" ]
   #then  
   #   ( cd $dest_dir/gnu/lib/gcc-lib/sparc-sun-solaris2.3/2.6.3/include/sys;
   #     mv types.h types.h.bk
   #   )  
   #fi 
 
   #finally copy the revision file info to $dest_dir and add $load_type
   rm -rf "$dest_dir"/vnmrrev
   cp "$source_dir"/vnmrrev "$dest_dir"/vnmrrev
   #A hack, for now
   if [ x${cons_type} = "xrht" ]
   then
        cons_type="mercplus"
   fi
   if [ -f "$src_code_dir"/.nv ] && [ x${cons_type} != "xmr400" ]
   then
      echo "vnmrs"  >> "$dest_dir"/vnmrrev
   else
      echo ${cons_type}  >> "$dest_dir"/vnmrrev
   fi
   chown $nmr_adm   "$dest_dir"/vnmrrev
   chgrp $nmr_group "$dest_dir"/vnmrrev
   chmod 644  "$dest_dir"/vnmrrev

   if [ x$os_version = "xwin" ]
   then
	prim_group=`/usr/bin/id -Gn $nmr_adm | $NAWK '{print $1}'`
   else
	prim_group=`groups $nmr_adm | $NAWK '{print $1}'`
   fi
   if [ x$prim_group !=  x$nmr_group ]
   then
      echo Updating group name to ${nmr_group}...
      cd "$dest_dir"/..
      chgrp -hR $nmr_group "$dest_dir"
   fi

   # finally make sure that execkill is owned by root, executable by root
   chown $rootuser "$dest_dir"/bin/execkillacqproc
   chmod 500  "$dest_dir"/bin/execkillacqproc

   if [ -f "$dest_dir"/bin/killroboproc ]
   then
     # make sure killroboproc is owned by root, executed as root
     chown $rooruser:$rootuser "$dest_dir"/bin/killroboproc
     chmod 4755 "$dest_dir"/bin/killroboproc
   fi

   # for VnmrJ set user ID on execution for /vnmr/bin/loginvjpassword
   # this way everyone can change password file which is owned by the admin
   if [ -f "$dest_dir"/bin/loginvjpassword ]
   then
       chmod 4755 "$dest_dir"/bin/loginvjpassword
   fi

   if [ x$os_version = "xwin" ] 
   then
       chmod 755 "$dest_dir"/adm/log
       chmod 755 "$dest_dir"/bin/vnmrj.exe
       chmod 755 "$dest_dir"/bin/vnmrj_debug.exe
       chmod 700 "$dest_dir"/bin/vnmrj_adm.exe
       chmod 777 "$dest_dir"/unins*.dat       
       
       if [ ! -f "$dest_dir"/uninstallvj.bat ]
       then
	 cp "$src_code_dir"/code/uninstallvj.bat "$dest_dir"
       fi
       chmod 755 "$dest_dir"/uninstallvj.bat

       chmod g+w "$dest_dir"/pgsql

       # make softlinks of exe in pgsql/bin
       pgsqlfiles=`ls /vnmr/pgsql/bin/*.exe`
       for pgsqlfile in $pgsqlfiles
       do
	  pgsqlfile2=`echo $pgsqlfile | awk '{FS="."} {print $1}'`
	  ln -s $pgsqlfile $pgsqlfile2
       done

       chmod a+w "$dest_dir"/pgsql
   fi
  

   #To have the Postgres postmaster started at system boot up
   if [ x$os_version != "xwin" ] 
   then
     cp -p "$dest_dir"/bin/S99pgsql /etc/init.d/pgsql
     
     r_levl="rc3.d"
     r_levl0="rc0.d"
   fi

   if [ x$os_version = "xrht" ]
   then
       if [ x$lflvr = "xsuse" ]
       then
          r_levl="init.d/rc5.d"
          r_levl0="init.d/rc0.d"
       else
          r_levl="rc5.d"
          r_levl0="rc0.d"
       fi
       if [ -f /usr/lib/libtcl8.4.so ]
       then
         cd "$dest_dir"/lib
         rm -f libtcl8.3.so libtk8.3.so
         ln -s /usr/lib/libtcl8.4.so libtcl8.3.so
         ln -s /usr/lib/libtk8.4.so libtk8.3.so
         if  [ -f libBLT24.so ]
         then
            mv libBLT24.so libBLT24.so.8.3
         fi
         rm -f libBLT.so
         ln -s libBLT24.so.8.4 libBLT.so
         rm -f /usr/share/tk8.4/vnmr
         ln -s /vnmr/tcl/tklibrary/vnmr /usr/share/tk8.4/vnmr
       fi
   fi

   if [ x$os_version != "xwin" ] 
   then
     (cd /etc/${r_levl}; if [ ! -f S99pgsql ]; then \
        ln -s ../init.d/pgsql S99pgsql ; fi)
     (cd /etc/${r_levl0}; if [ ! -f K99pgsql ]; then \
        ln -s ../init.d/pgsql K99pgsql ; fi)
     #Remove old versions
     rm -f /etc/init.d/S99pgsql
     rm -f /etc/rc2.d/S99pgsql
   fi

   if [ x$os_version = "xsol" ]
   then
     ln -s /cdrom/cdrom0/.jhelp /vnmr/jhelp
   elif [ x$os_version = "xrht" ]
   then
     if [ -d /media/cdrom ]
     then
        ln -s /media/cdrom/.jhelp /vnmr/jhelp
     elif [  -d /media/cdrecorder ]
     then
        ln -s /media/cdrecorder/.jhelp /vnmr/jhelp
     else
        ln -s /mnt/cdrom/.jhelp /vnmr/jhelp
     fi
   fi

   #Open Source Sudo package
   sudoers="/etc/sudoers"
   sudofile="/usr/local/bin/sudo"

   if [ x$os_version = "xrht" ]
   then
      #special precaution for Linux
      /usr/bin/file /usr/local/bin/sudo | grep Intel 2>&1 >/dev/null
      if [ $? -ne 0 ]
      then
         rm -f /usr/local/bin/sudo
      fi

      if [ -f /etc/redhat-release ]
      then
         lv=`/bin/cat /etc/redhat-release | grep 4` 
         if [ x"$lv" != "x" ]
         then
            rm -f /usr/local/bin/sudo
         fi
      fi

      if [ x$lflvr != "xsuse" ]
      then
         if [ ! -x /usr/sbin/rarpd -a -f $src_code_dir/.nv -a x`uname -p` = "xi686" ]         
	 then
            echo "Installing rarp server package"
            rpm -i $src_code_dir/linux/rarpd-ss981107-14.i386.rpm 2>&1 >/dev/null
         fi
         if [ ! -x /usr/sbin/rarpd -a -f $src_code_dir/.nv -a x`uname -p` = "xx86_64" ]
         then
            echo "Installing rarp server package"
            rpm -i $src_code_dir/linux/rarpd-ss981107-18.x86_64.rpm 2>&1 >/dev/null
         fi
         if [ ! -r /etc/xinetd.d/tftp -a -f $src_code_dir/.nv -a x`uname -p` = "xx86_64" ]
         then
            echo "Installing tftp server package"
            rpm -i --nodeps $src_code_dir/linux/tftp-server-0.32-4.i386.rpm 2>&1 >/dev/null
         fi
         if [ ! -r /etc/xinetd.d/tftp -a ! -f $src_code_dir/.nv ]
         then
            echo "Installing tftp server package"
            rpm -i $src_code_dir/linux/tftp-server-0.32-4.i386.rpm 2>&1 >/dev/null
         fi
         if [ ! -x /usr/sbin/bootpd -a ! -f $src_code_dir/.nv ]
         then
            echo "Installing bootp package"
            rpm -i $src_code_dir/linux/bootp-2.4.3-7.i386.rpm 2>&1 >/dev/null
         fi
	 rm -f /vnmr/pgsql/lib/libtermcap.so.2.0.8
      else
	 (cd /vnmr/pgsql/lib; ln -s libtermcap.so.2.0.8 libtermcap.so.2)
      fi

      if [ ! -x /usr/bin/acroread  -a  ! -x /usr/X11R6/bin/acroread ]
      then
         echo "Installing Acrobat package"
         rpm -i $src_code_dir/linux/acroread-5.08-2.i386.rpm 2>&1 >/dev/null
      fi
      
      (cd $dest_dir/bin; ln Vnmrbg Vnmr)
      ln -s /usr/bin/convert /vnmr/bin/convert

      if [ ! -r /usr/share/cups/model/laserjet.ppd ] 
      then
         echo "Unpacking cups filters"
         /bin/gunzip /usr/share/cups/model/*.gz
      fi
      chmod 666 /dev/console
   fi

   if [ ! -f "$sudofile" ]
   then
      case x$os_version in
         "xrht") cp -rf /vnmr/sudo.lnx/usr/local /usr ;;
         "xsol") cp -rf /vnmr/sudo/usr/local /usr ;;
              *) ;;
      esac
   fi
   if [ ! -f "$sudoers" -a x$os_version != "xwin" ]
   then
       cp -f "$dest_dir"/sudo/etc/sudoers /etc
   fi

   if [ x$os_version = "xrht" ]
   then
       if [ ! -x /usr/local/bin/sudo ]
       then
           cp /usr/bin/sudo /usr/local/bin/sudo
       fi

       if [ ! -x /usr/local/sbin/visudo ]
       then
          cp /usr/sbin/visudo /usr/local/sbin/visudo
       fi
   fi
   
   if [ x$os_version != "xwin" ]
   then
      # set the /etc/sudoers
      "$dest_dir"/bin/sudoins $NAWK $configP11 $os_version $nmr_adm
      chown $rootuser "$dest_dir"/bin/sudoins
      chmod 500 "$dest_dir"/bin/sudoins
  
      chmod 4111 /usr/local/bin/sudo
      chmod 111 /usr/local/sbin/visudo
   
      chmod 440 "$sudoers"
      chown $rootuser "$sudoers"
      chgrp $rootuser "$sudoers"
      rm -rf "$dest_dir"/sudo
   fi

## Sudo cmds go to /usr/varian/sbin
## might not need the following
##
##
## since these Vnmr commands will be executed as root, 
## root better own them so others # can't edit them and
## run their own scripts as root, i.e.  *security hole"   GMB
##
#   for cmd in $sudo_cmds
#   do
#       bdir=`echo $cmd | cut -d '/' -f1-2`
#       # just change the /vnmr commands not the /usr system commands
#       if [ "x/vnmr" = "x$bdir" ]
#       then
#	  # get rid of the comma
#          ccmd=`echo $cmd | cut -d ',' -f1`
#          chown root $ccmd
#          chmod 555 $ccmd
#      fi
#  done
#

   if [ ! -d /usr/varian/config -a  x$os_version != "xwin" ]
   then
       mkdir -p /usr/varian/config
       chmod 777 /usr/varian/config
   fi
   if [ ! -d "$sbindir" -a x$os_version != "xwin" ]
   then
       mkdir "$sbindir"
   fi
 
   /bin/echo "#!/bin/sh
   if [ \$# -eq 3 -a x\$3 = \"xadMin\" ]
   then
   /bin/mv \$1 \$2
   fi"> "$dest_dir"/bin/vcmdm
   chmod 700 "$dest_dir"/bin/vcmdm
 
   /bin/echo "#!/bin/sh
   if [ \$# -eq 2 -a x\$2 = \"xadMin\" ]
   then
   /bin/rm -rf \$1
   fi"> "$dest_dir"/bin/vcmdr
   chmod 700 "$dest_dir"/bin/vcmdr

   if [ x$os_version != "xwin" ]
   then
      cd "$dest_dir"/bin
      cp adddevices makeuser vnmr_accounting "$sbindir"
      mv jtestgroup jtestuser vcmdm vcmdr "$sbindir"

      cp "$dest_dir"/pgsql/bin/create_pgsql_user "$sbindir"

   fi

   if [ x$os_version = "xrht" ]
   then
      chown root:root "$sbindir"/jtest*
   elif [ x$os_version != "xwin" ]
   then
      chown root:other "$sbindir"/jtest*
   fi
   if [ x$os_version != "xwin" ]
   then
      chmod 755 /usr/varian
      chmod 755 "$sbindir"
      chmod 700 "$sbindir"/*
   fi
# Special macros for new system.

   if [ -f "$src_code_dir"/.nv ]
   then
     cd "$dest_dir"/maclib
     mv _sw _sw_orig
     ln -s _sw_ddr _sw
     mv mtune mtune_orig
     ln -s mtune_ddr mtune
   fi

fi

# alter the kudzu configuration file in /etc/init.d to place kudzu into "safe mode" i.e. do ONT probe the
# serial ports, causes havoc with VAST (gilson-215), etc.    GMB 3/2/2007  bugzilla # 5146
if [ x$os_version = "xrht" ]
then
   if [ x$lflvr != "xsuse" ]
   then
      cd /etc/init.d
      if [ ! -f ./Varian_kudzu.safe-mode ]
      then
        cat kudzu | sed s/KUDZU_ARGS=$/KUDZU_ARGS=\"-s\"/ > ./Varian_kudzu.safe-mode
        mv kudzu kudzu.orig
        cp Varian_kudzu.safe-mode kudzu
      else
        cp Varian_kudzu.safe-mode kudzu
      fi
   fi
fi

# RedHat 5.1 does not include kermit
if [ -f /etc/redhat-release ]
then
    grep -q 5.1 /etc/redhat-release
    if [ $? -ne 0 ]
    then
        rm -rf /vnmr/kermit
    else
       if [ ! -f /usr/bin/kermit ]
       then
          cp -p /vnmr/kermit/kermit /usr/bin/kermit
          chmod 755 /usr/bin/kermit
       fi
    fi
fi


if [ x$configP11 = "xyes" ]
then
   ( cd ${dest_dir}/bin

      cp chchsums "$sbindir"
      cp /vnmr/bin/vnmrMD5 /tmp
      mv auconvert auevent auinit aupurge aureduce auredt aupw \
         makeP11checksums vnmrMD5 killau killch scanlog "$sbindir"

     ./setupscanlog

     #To have the scanlog started at system boot up
     cp -p ${dest_dir}/bin/S99scanlog /etc/init.d
     ( cd /etc/rc2.d
       if [ -f S99scanlog ]
       then
         rm -f S99scanlog
       fi
       ln -s /etc/init.d/S99scanlog
     )
     mv -f ${dest_dir}/bin/S99scanlog "$sbindir"
     mv -f ${dest_dir}/bin/setupscanlog "$sbindir"
   )
   #Need to reboot the computer for this to work
    
    "$sbindir"/makeP11checksums /vnmr $nmr_adm $nmr_group

    #for cmd in $sudo_p11_cmds
    #do
    #    chmod 500 $cmd
    #done
    
    #moved over from the patch
    chmod 644 "$dest_dir"/adm/users/profiles/accPolicy

    p11config="$dest_dir"/p11/part11Config

    auditdir=`grep auditDir: $p11config | awk 'BEGIN {FS=":"} {print $2}'`
    if [ ! -d "$auditdir" ]
    then
        mkdir -p "$auditdir"
    fi

    p11dir=`grep part11Dir: $p11config | awk 'BEGIN {FS=":"} {print $2}'`
    if [ ! -d "$p11dir" ]
    then
        mkdir -p "$p11dir"
    fi
    chown ${nmr_adm}:${nmr_group} "$auditdir" "$p11dir"
    chmod 755 "$auditdir" "$p11dir"

    cd "$sbindir"
    chown $rootuser:$rootuser auconvert aureduce auevent auinit aupurge aupw \
		 auredt makeP11checksums vnmrMD5 killau killch scanlog chchsums
    chmod 700 auconvert aureduce auevent auinit aupurge aupw auredt \
              makeP11checksums vnmrMD5 killau killch scanlog chchsums

else
    if [ -d "$dest_dir"/p11 ]
    then
        rm -rf "$dest_dir"/p11
    fi
fi

if [ -f "$dest_dir"/pw_fault ]
then
    echo ""
    echo "One or more passwords for the following options were incorrect "
    cat $dest_dir/pw_fault
    echo "     If you have the correct password, you can "
    echo "     (re)load the option separately."
    echo "     Run load.nmr again, and only select the option(s)"
    echo ""
fi
#pw_fault is deleted in ProgressMonitor.java

#
#There is a check in ProgressMonitor.java for the below message
echo "Software Installation Completed."

#check for running setacq here
