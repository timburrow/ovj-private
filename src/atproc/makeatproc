# 
# makeatproc  make file
#
# make -f makeatproc creates Atproc
#
#

MAKEFILE= makeatproc


# sourcedir, sccsdir & vnmrdir are environment variables
# sccsdir & vnmrdir are environment variables
# sccsdir -> SCCS directory
# vnmrdir -> vnmr directory
SRCDIR=$(sourcedir)
SCCSDIR=$(sccsdir)

#------  The Real Sources for object are contained in one directory --
# for testing it is '../' normally it would be a absolute path..
# SRC_DIR=$(SRCDIR)/sysatproc/
SRC_DIR=./


#-----  Project Category Under the SCCS directory --------
# sccsdir -> SCCS directory  (e.g., /big/sccs )
# PROJCAT= vnmr/  -> directory under SCCS directory  (e.g., /big/sccs/vnmr/ )
PROJCAT=

# set defines acording to system Type
CC = cc -Xa -DSOLARIS
LIBS =   -R /vnmr/lib -lm -lsocket -lnsl -ldl
NCOMMDIR = /vobj/sol/proglib/ncomm
OBJDIR = sol
OPTIMIZE = -xO2
DEBUGOPT = -g -xF -xsb
CFLAGS= -O -DDEBUG
CPPFLAGS=
LDFLAGS=
TARGET_ARCH=
COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.c= $(CC) $(LDFLAGS) $(TARGET_ARCH)


RECVPROC_SRC_DIR= $(SRC_DIR)
SENDPROC_SRC_DIR= $(SRC_DIR)
EXPPROC_SRC_DIR= $(SRC_DIR)
NCOMM_SRC_DIR= $(SRC_DIR)
ATPROC_SRC_DIR= $(SRC_DIR)
VWACQ_SRC_DIR= $(SRC_DIR)
VNMR_SRC_DIR= $(SRC_DIR)

#--- SCCS Sources ----
RECVPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)recvproc/SCCS/s.
SENDPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)sendproc/SCCS/s.
EXPPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)expproc/SCCS/s.
NCOMM_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)ncomm/SCCS/s.
ATPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)atproc/SCCS/s.
VWACQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vwacq/SCCS/s.
VNMR_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vnmr/SCCS/s.

#--- Link Commands for Sources Needed. -------
RECVPROC_LN = ln -s $(RECVPROC_SRC_DIR)$(@)
SENDPROC_LN = ln -s $(SENDPROC_SRC_DIR)$(@)
EXPPROC_LN = ln -s $(EXPPROC_SRC_DIR)$(@)
ATPROC_LN = ln -s $(ATPROC_SRC_DIR)$(@)
NCOMM_LN = ln -s $(NCOMM_SRC_DIR)$(@)
VWACQ_LN = ln -s $(VWACQ_SRC_DIR)$(@)
VNMR_LN = ln -s $(VNMR_SRC_DIR)$(@)
 
#---  SCCS Extraction Commands for Sources Needed.  -------
RECVPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)recvproc/SCCS get
SENDPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)sendproc/SCCS get
ATPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)atproc/SCCS get
NCOMM_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)ncomm/SCCS get
EXPPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)expproc/SCCS get
VWACQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vwacq/SCCS get
VNMR_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vnmr/SCCS get

#----  default source extraction to links -------
RECVPROC_GET= $(RECVPROC_SGET)
SENDPROC_GET= $(SENDPROC_SGET)
ATPROC_GET= $(ATPROC_SGET)
NCOMM_GET= $(NCOMM_SGET)
EXPPROC_GET= $(EXPPROC_SGET)
VWACQ_GET= $(VWACQ_SGET)
VNMR_GET= $(VNMR_SGET)

#------------------------------------------------------------------------
#--- Expproc Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
EXPPROC_HDR=                    \
		hostMsgChannels.h	\
                parser.h

EXPPROC_SRC=			\
		excepthandler.c	\
		parser.c

EXPPROC_OBJ= $(EXPPROC_SRC:.c=.o)

NCOMM_HDR=                  \
        chanLib.h	\
	errLogLib.h     \
	eventHandler.h  \
	eventQueue.h    \
	eventQueueP.h   \
	hhashLib.h      \
	ipcKeyDbm.h     \
	ipcMsgQLib.h    \
	listObj.h       \
	mfileObj.h      \
	msgQLib.h       \
	semLib.h        \
	shrMLib.h
 
NCOMM_SRC=                  \
	fdmask.c	\
	asyncIo.c       \
	errLogLib.c     \
	eventHandler.c  \
	eventQueue.c    \
	hhashLib.c      \
	ipcKeyDbm.c     \
	ipcMsgQLib.c    \
	listObj.c       \
	mfileObj.c      \
	msgQLib.c       \
	semLib.c        \
	shrMLib.c
 
NCOMM_OBJ= $(NCOMM_SRC:.c=.o)

#------------------------------------------------------------------------

#------------------------------------------------------------------------
#-- atproc Source  files 
#------------------------------------------------------------------------
ATPROC_HDR=

ATPROC_SRC=			\
		atcmds.c	\
		atproc.c	\
		atfuncs.c

ATPROC_OBJ= $(ATPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Vnmr Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
VNMR_HDR=			\
		errorcodes.h	\
		acquisition.h
VNMR_SRC=
VNMR_OBJ= $(VNMR_SRC:.c=.o)


#---- All Sources and headers required for compilation -----
ALLSRC= 				\
	$(EXPPROC_SRC) $(EXPPROC_HDR)	\
	$(NCOMM_SRC) $(NCOMM_HDR)	\
	$(ATPROC_SRC) $(ATPROC_HDR) \
	$(VNMR_SRC) $(VNMR_HDR)
 
ALL_C_SRC = $(ALLSRC)

#LINTFILES= $(ALLSRC:.c=.ln)
 
# link to ncomm library libncomm.a 

all std : Source atcmd
	@ echo "NMR_ID Atproc programs Complete"

dbx :  Sourcedbx
	@( if [ ! -d $(OBJDIR)dbx ]; then       \
		mkdir $(OBJDIR)dbx;                  \
	fi)
	( cd $(OBJDIR)dbx;                      \
	$(MAKE) -e -f ../$(MAKEFILE) \
	"CFLAGS = $(DEBUGOPT) -DDEBUG"  \
	Atproc_dbx )
	@echo "NMR_ID Atproc_dbx complete ----------------------------------"

WINDOWS :
	@( if [ ! -d win_sfu ]; then    \
	   mkdir win_sfu;                       \
	fi)
	( cd win_sfu;                   \
	  $(MAKE) -e -f ../$(MAKEFILE) \
	  "CC = gcc"                  \
	  "DEBUGOPT = -g"                 \
	  "CFLAGS = -DLINUX -D_ALL_SOURCE -D_REENTRIENT"               \
	  "LDFLAGS = " \
	  "LIBS= -lm -lsocket " \
	  Atproc_win)
	@echo "NMR_ID Windows Atproc complete -------------------------------------"


atcmd : $$(MAKEFILE)
	( $(MAKE) -e -f $(MAKEFILE) \
	"CFLAGS = $(OPTIMIZE) -DDEBUG "  \
	"LDFLAGS = -L/vnmr/lib" \
	"OBJDIR=$(sun4objdir)"		\
	Atproc )
	@echo "NMR_ID Atproc complete -------------------------------------"

SOLARIS: atcmd
	echo "Solaris target is std target"

getsrc:
	( $(MAKE) -e -f $(MAKEFILE) \
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"   \
             "EXPPROC_GET= $(EXPPROC_SGET)" 	\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"   \
             "NCOMM_GET= $(NCOMM_SGET)" 	\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "VWACQ_SRC_DIR= $(VWACQ_SCCS_SRC)" \
	     "VWACQ_GET= $(VWACQ_SGET)" \
             "ATPROC_SRC_DIR= $(ATPROC_SCCS_SRC)" \
             "ATPROC_GET= $(ATPROC_SGET)" src)

cl : getsrc
	#cmode
	#load -C  -DDEBUG $(EXPPROC_SRC)
	#load -C  -DDEBUG $(ATPROC_SRC)
	#link
	#unres

clclean :
	#cmode
	#unload $(EXPPROC_SRC)
	#unload $(ATPROC_SRC)


# ---- Be sure True Source that we link to are upto date.
Source :
	( cd $(SRC_DIR); $(MAKE) -e -f $(MAKEFILE) \
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"   \
             "EXPPROC_GET= $(EXPPROC_SGET)" 	\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"   \
             "NCOMM_GET= $(NCOMM_SGET)" 	\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "ATPROC_SRC_DIR= $(ATPROC_SCCS_SRC)" \
             "ATPROC_GET= $(ATPROC_SGET)" src)

Sourcedbx :
	( cd soldbx; $(MAKE) -e -f ../$(MAKEFILE) \
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"   \
             "EXPPROC_GET= $(EXPPROC_SGET)" 	\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)"   \
             "NCOMM_GET= $(NCOMM_SGET)" 	\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "ATPROC_SRC_DIR= $(ATPROC_SCCS_SRC)" \
             "ATPROC_GET= $(ATPROC_SGET)" src)

src : $$(MAKEFILE) $(ALLSRC)
	@echo Sources up to date...

Atproc : $(ATPROC_OBJ) $(EXPPROC_OBJ)
	(umask 2; $(LINK.c) -o $@  -L$(NCOMMDIR) $(ATPROC_OBJ) $(EXPPROC_OBJ) -lacqcomm $(LIBS))
	( umask 2; cp $@ ..)
	@echo Atproc is complete

Atproc_dbx : $(ATPROC_OBJ) $(EXPPROC_OBJ) $(NCOMM_OBJ)
	(umask 2; $(LINK.c) -o $@  $(ATPROC_OBJ) $(EXPPROC_OBJ) $(NCOMM_OBJ) $(LIBS))
	( umask 2; cp $@ ..)
	@echo $@ is complete

Atproc_win : $(ATPROC_OBJ) $(EXPPROC_OBJ) $(NCOMM_OBJ)
	(umask 2; $(LINK.c) -o Atproc  $(ATPROC_OBJ) $(EXPPROC_OBJ) $(NCOMM_OBJ) $(LIBS))
	( umask 2; cp Atproc ..)
	@echo $@ is complete


depend:	$$(MAKEFILE) getsrc
	@ echo making dependencies...
	@ grep '^#include' $(ALL_C_SRC) \
		| sed 's/<\([^>]*\)>/"\/usr\/include\/\1"/' \
		| sed 's/:[^"]*"\([^"]*\)".*/: \1/' \
		| sed 's/\.c/.o/' \
                | sed 's/\.y/.o/' \
                | sed 's/\.l/.o/' >makedepd
	@ ls -1 $(ALL_C_SRC) | awk "{ {len = length(\$$0)} {s2 = substr(\$$0, 1, len - 2)} {print s2 \".o: \", \$$0 >> \"makedepd\"} } "
	@ awk "{ if ( \$$2 !~ /\/usr\// ) { print \$$0; } }" makedepd | sort > makedep
	@ echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	@ echo '$$r makedep' >>eddep
	@ echo 'w' >>eddep
	@ cp $(MAKEFILE) $(MAKEFILE).bak
	@ ed - $(MAKEFILE) < eddep
	@ rm eddep makedep makedepd
	@ echo '# DEPENDENCIES MUST END AT END OF FILE' >> $(MAKEFILE)
	@ echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> $(MAKEFILE)
	@ echo '# see make depend above' >> $(MAKEFILE)

#--- Object Targets ----------------------------------------------

$(ALLOBJS) : $(@:.o=.c)
	-(umask 2; $(COMPILE.c) $(@:.o=.c) )

#------ makefile extraction via SCCS allways. -------
$(MAKEFILE) : 
	$(ATPROC_SGET) $@

#------------  Source Extraction via SCCS or Links ---------------

$(ATPROC_SRC) $(ATPROC_HDR) : $$(ATPROC_SCCS_SRC)$$(@)
	$(ATPROC_GET) $@

$(EXPPROC_SRC) $(EXPPROC_HDR) : $$(EXPPROC_SCCS_SRC)$$(@)
	$(EXPPROC_GET) $@

$(NCOMM_SRC) $(NCOMM_HDR) : $$(NCOMM_SCCS_SRC)$$(@)
	$(NCOMM_GET) $@

$(VNMR_SRC) $(VNMR_HDR) : $$(VNMR_SCCS_SRC)$$(@)
	$(VNMR_GET) $@

$(VWACQ_SRC) $(VWACQ_HDR) : $$(VWACQ_SCCS_SRC)$$(@)
	$(VWACQ_GET) $@


# DO NOT DELETE THIS LINE -- make depend uses it
# DEPENDENCIES MUST END AT END OF FILE
acquisition.o:  acquisition.h
atcmds.o:  atcmds.c
atcmds.o: parser.h
atfuncs.o:  atfuncs.c
atfuncs.o: errLogLib.h
atproc.o:  atproc.c
atproc.o: errLogLib.h
atproc.o: eventHandler.h
atproc.o: hostMsgChannels.h
atproc.o: msgQLib.h
errLogLib.o:  errLogLib.c
errLogLib.o:  errLogLib.h
errorcodes.o:  errorcodes.h
eventHandler.o:  eventHandler.h
eventHandler.o:  listObj.h
eventHandler.o:  eventQueue.h
eventHandler.o:  eventQueueP.h
excepthandler.o:  excepthandler.c
excepthandler.o: errLogLib.h
hhashLib.o:  hhashLib.h
ipcKeyDbm.o: ipcKeyDbm.h
ipcMsgQLib.o:  ipcMsgQLib.h
mfileObj.o:  mfileObj.h
msgQLib.h: ipcMsgQLib.h
msgQLib.h: shrMLib.h
msgQLib.o:  msgQLib.h
msgQLib.o:  chanLib.h
semLib.o: semLib.h
parser.o:  parser.c
parser.o:  parser.h
parser.o: errLogLib.h
parser.o: hhashLib.h
parser.o: parser.h
shrMLib.h: mfileObj.h
shrMLib.o:  shrMLib.h
# DEPENDENCIES MUST END AT END OF FILE
# IF YOU PUT STUFF HERE IT WILL GO AWAY
# see make depend above
