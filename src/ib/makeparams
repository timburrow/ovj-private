#************************************************************************
#									
#  Copyright (c) Varian Assoc., Inc.  All Rights Reserved.
#
#************************************************************************
#
#  Build  static libraries (libparams.a, libparams_sol.a)
#  and install include-files into ../../include/params and libraries into
#  ../../lib directories. 
#  NOTE: "install" assumes a directory structure of:
#	<toplevel>/src/params/<sources>
#	<toplevel>/lib/<libraries>
#	<toplevel>/include/params/<include_files>
#
#    make -f makeparams -- decides which system it is on and makes the library
#			accordingly
#    make -f makeparams debug --- does the same for debug versions.
#    make -f makeparams install	--- NOT currently being used
#
#  Build "shared" library (libparams.so.x.x) (not implemented yet)
#
#  Build "static" library (libparams.a)
#    make -f makeparams libparams
#    make -f makeparams libparams_sol
#
#
#
#
#************************************************************************


#-------------------------------------------------
# Directories
#-------------------------------------------------
UTILSSRC=$(sccsdir)/ib
PARAMSSRC=$(sccsdir)/ib
PARAMSLIB=../../lib
PARAMSINC=../../include/params
SRCPARAMS=../src/params
MAKEFILE=makeparams
PARAMS_REV=
UTILS_REV=


# CC=gcc
TARGET_ARCH=
CFLAGS=-O -c
#CFLAGS=-Wall -ansi -c -DANSI_C
COMPILE.c=$(CC) $(CFLAGS) $(CPPFLAGS)
DEBUG=-DDEBUG
DEBUG_ALLOC=-DDEBUG_ALLOC
CLOCKTIME=-DCLOCKTIME

OSTYPE=`uname -r | awk '{ print substr($$0,1,1) }'`

#-------------------------------------------------
# Target library to be built for shared and static
#-------------------------------------------------
# PARAMS_LIB_A=libparams.a
PARAMS_LIB_SO=libparams.so.1.1
# DEBUG_LIB_A=libparams_dbx.a
DEBUG_LIB=libparams_dbg.so.1.1

.c.o:
	$(COMPILE.c) $(DEBUG) $(DEBUG_ALLOC) $(CLOCKTIME) $<

.PRECIOUS: $(PARAMS_LIB)
.KEEP_STATE:

#-------------------------------------------------
# Sources and include files						
#-------------------------------------------------

UTILS_INCS=boolean.h error.h debug_alloc.h

LIB_INCS=params.h p_struct.inc p_static.inc storage.h stack.h \
	 tree.h tp.h

UTILS_SRCS=error.c debug_alloc.c

LIB_SRCS=params.c tree.c stack.c


UTILS_OBJS=$(UTILS_SRCS:.c=.o)
LIB_OBJS=$(LIB_SRCS:.c=.o)

#-------------------------------------------------
#  Include files for include directory					
#-------------------------------------------------
.INIT: $(LIB_INCS) $(UTILS_INCS)

 

#------------------------- library build --------------------------------------

#-------------------------------------------------
# User specified target for static library
#-------------------------------------------------
std:		
		@echo $(OSTYPE)
		set -x; if [ $(OSTYPE) = "5" ]; then \
		 ($(MAKE) -e -f $(MAKEFILE) "CFLAGS= -O -c -DSOLARIS" \
		   libparams_sol ); \
		elif [ $(OSTYPE) = "4" ]; then \
		 ( $(MAKE) -e -f $(MAKEFILE) \
		   libparams ) ; \
		fi

debug: 
		@echo $(OSTYPE)
		set -x; if [ $(OSTYPE) = "5" ]; then \
		 ($(MAKE) -e -f $(MAKEFILE) "DEBUG= -DDEBUG -DSOLARIS" \
		   libparams_soldbx ); \
		elif [ $(OSTYPE) = "4" ]; then \
		 ( $(MAKE) -e -f $(MAKEFILE) \
		   libparams_dbx ) ; \
		fi

libparams: libparams.a

libparams_sol: libparams_sol.a

libparams_dbx: libparams_dbx.a

libparams_soldbx: libparams_soldbx.a

#-------------------------------------------------
# install both libraries as a soft-link in $(PARAMSLIB) directory
# install all include files into $(PARAMSINC) directory, and
# Note that the last statement is to change ".nse_depinfo" to be writeable
# by everybody.  The reason we put the "sleep" is to delay changing
# the mode so that the built-in "make" will change it first.
#-------------------------------------------------
install: now
	make -f $(MAKEFILE) static
	make -f $(MAKEFILE) debug
	/bin/rm -rf $(PARAMSLIB)/$(DEBUG_LIB_A) $(PARAMSLIB)/$(PARAMS_LIB_A)
	(cd $(PARAMSLIB); cp $(SRCPARAMS)/$(PARAMS_LIB_A) $(PARAMS_LIB_A); \
	 cp $(SRCPARAMS)/$(DEBUG_LIB_A) $(DEBUG_LIB_A))
	(cd $(PARAMSINC); sccs -d $(PARAMSSRC) get $(PARAMS_REV) $(MAKEFILE); \
		make -f $(MAKEFILE) now)
	@(sleep 3; chmod -f 666 .nse_depinfo)&

#-------------------------------------------------
# Flags changed due to users
#-------------------------------------------------
debug := COMPILE.c=cc -g -c $(DEBUG) $(DEBUG_ALLOC) 


$(PARAMS_LIB_SO): 
	cc -pic -O -c $(LIB_SRCS)
	ld -assert pure-text $(LIB_OBJS) -o $@
	rm $(LIB_OBJS)

$(DEBUG_LIB): 
	cc -pic -g -c $(DEBUG) $(DEBUG_ALLOC) $(LIB_SRCS) debug_alloc.c
	ld -lolgx -assert pure-text $(LIB_OBJS) debug_alloc.o -o $@
	rm $(LIB_OBJS) debug_alloc.o

libparams.a: $(LIB_OBJS) $(UTILS_OBJS)
	ar cvlq $@ $(LIB_OBJS) $(UTILS_OBJS)
	ranlib $@

libparams_sol.a : $(LIB_OBJS) $(UTILS_OBJS)
	ar rv $@ `lorder $(LIB_OBJS) $(UTILS_OBJS) | tsort`

libparams_dbx.a: $(LIB_OBJS) $(UTILS_OBJS)
	ar cvlq $@ $(LIB_OBJS) $(UTILS_OBJS)
	ranlib $@

libparams_soldbx.a : $(LIB_OBJS) $(UTILS_OBJS)
	ar rv $@ `lorder $(LIB_OBJS) $(UTILS_OBJS) | tsort`


$(LIB_OBJS) $(UTILS_OBJS): $(@:.o=.c) 
	(umask 2; $(COMPILE.c) $<)

#------------------------- lint build -----------------------------------------

#-------------------------------------------------
# SCCS extraction				
#-------------------------------------------------
$(LIB_SRCS) $(LIB_INCS) : $(PARAMSSRC)/SCCS/s.$$@
	sccs -d $(PARAMSSRC) get $(PARAMS_REV) $@

$(UTILS_SRCS) $(UTILS_INCS) : $(UTILSSRC)/SCCS/s.$$@
	sccs -d $(UTILSSRC) get $(UTILS_REV) $@

now:
