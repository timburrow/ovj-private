# 
# Copyright (c) Varian Inc. All Rights Reserved. 
# This software contains proprietary and confidential 
# information of Varian Inc. and its contributors. 
# Use, disclosure and reproduction is prohibited without 
# prior consent. 
#
#
# makerecvproc  make file
#
# make -f makerecvproc creates Recvproc
# make -f makerecvproc dbx, creates Recvproc	DBX ver.
#
# ----->  dbx or profiling libraries are not a standard release item and are not to
#         be given to customers....    1/29/88  Greg Brissey
#

MAKEFILE= makerecvproc

.PRECIOUS= libRecvproc.a libRecvproc.a

# sourcedir, sccsdir & vnmrdir are environment variables
# sccsdir & vnmrdir are environment variables
# sccsdir -> SCCS directory
# vnmrdir -> vnmr directory
SRCDIR=$(sourcedir)
SCCSDIR=$(sccsdir)
VNMRDIR=$(vnmrdir)

#------  The Real Sources for object are contained in one directory --
# for testing it is '../' normally it would be a absolute path..
SRC_DIR=$(SRCDIR)/sysrecvproc/


#-----  Project Category Under the SCCS directory --------
# sccsdir -> SCCS directory  (e.g., /big/sccs )
# PROJCAT= vnmr/  -> directory under SCCS directory  (e.g., /big/sccs/vnmr/ )
PROJCAT=


# set defines acording to system Type
CC= cc
LIBS= -R /vnmr/lib -lm -lsocket -lnsl
NCOMMDIR= $(solobjdir)/proglib/ncomm
OBJDIR= sol
OPTIMIZE= -xO2
DEBUGOPT= -g - g -xF -xsb
CFLAGS= -O2 -Xa -DSOLARIS
CPPFLAGS=
LDFLAGS=
TARGET_ARCH=
COMPILE.c= $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.c= $(CC) $(LDFLAGS) $(TARGET_ARCH)
COMPILEDSP.c= $(CC) -c -xO4

RECVPROC_SRC_DIR= $(SRC_DIR)
PROCPROC_SRC_DIR= $(SRC_DIR)
SENDPROC_SRC_DIR= $(SRC_DIR)
EXPPROC_SRC_DIR= $(SRC_DIR)
NCOMM_SRC_DIR= $(SRC_DIR)
ROBOPROC_SRC_DIR= $(SRC_DIR)
VWACQ_SRC_DIR= $(SRC_DIR)
VNMR_SRC_DIR= $(SRC_DIR)

#--- SCCS Sources ----
RECVPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)recvproc/SCCS/s.
PROCPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)procproc/SCCS/s.
SENDPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)sendproc/SCCS/s.
EXPPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)expproc/SCCS/s.
NCOMM_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)ncomm/SCCS/s.
ROBOPROC_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)roboproc/SCCS/s.
VWACQ_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vwacq/SCCS/s.
VNMR_SCCS_SRC=$(SCCSDIR)/$(PROJCAT)vnmr/SCCS/s.

#--- Link Commands for Sources Needed. -------
RECVPROC_LN = ln -s $(RECVPROC_SRC_DIR)$(@)
PROCPROC_LN = ln -s $(PROCPROC_SRC_DIR)$(@)
SENDPROC_LN = ln -s $(SENDPROC_SRC_DIR)$(@)
EXPPROC_LN = ln -s $(EXPPROC_SRC_DIR)$(@)
ROBOPROC_LN = ln -s $(ROBOPROC_SRC_DIR)$(@)
NCOMM_LN = ln -s $(NCOMM_SRC_DIR)$(@)
VWACQ_LN = ln -s $(VWACQ_SRC_DIR)$(@)
VNMR_LN = ln -s $(VNMR_SRC_DIR)$(@)
 
#---  SCCS Extraction Commands for Sources Needed.  -------
RECVPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)recvproc/SCCS get
PROCPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)procproc/SCCS get
SENDPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)sendproc/SCCS get
ROBOPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)roboproc/SCCS get
NCOMM_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)ncomm/SCCS get
EXPPROC_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)expproc/SCCS get
VWACQ_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vwacq/SCCS get
VNMR_SGET = sccs -p$(SCCSDIR)/$(PROJCAT)vnmr/SCCS get
 
#----  default source extraction to links -------
RECVPROC_GET= $(RECVPROC_LN)
PROCPROC_GET= $(PROCPROC_LN)
SENDPROC_GET= $(SENDPROC_LN)
ROBOPROC_GET= $(ROBOPROC_LN)
NCOMM_GET= $(NCOMM_LN)
EXPPROC_GET= $(EXPPROC_LN)
VWACQ_GET= $(VWACQ_LN)
VNMR_GET= $(VNMR_LN)



#------------------------------------------------------------------------
#--- NCOMM Sources that are needed for Recvproc
#------------------------------------------------------------------------
# Communications libraries
NCOMM_HDR_LIB=			\
		errLogLib.h	\
                eventHandler.h  \
                eventQueue.h    \
                eventQueueP.h   \
		hhashLib.h	\
		ipcKeyDbm.h	\
		ipcMsgQLib.h	\
                listObj.h       \
		mfileObj.h	\
		msgQLib.h	\
		semLib.h	\
		shrMLib.h

NCOMM_SRC_LIB=			\
		asyncIo.c	\
		errLogLib.c	\
                eventHandler.c  \
                eventQueue.c    \
		hhashLib.c	\
		ipcKeyDbm.c	\
		ipcMsgQLib.c	\
                listObj.c       \
		mfileObj.c	\
		semLib.c	\
		msgQLib.c	\
		shrMLib.c

NCOMM_OBJ_LIB= $(NCOMM_SRC_LIB:.c=.o)

#------------------------------------------------------------------------
#--- Channel Sources that are needed for Recvproc
#------------------------------------------------------------------------
CHANOBJ_HDR=			\
		chanLib.h	\
		chanLibP.h	\
		sockets.h

CHANOBJ_SRC=			\
		chanLib.c	\
		sockets.c	\
		signals.c	\
		fdmask.c

CHANOBJ_OBJ=$(CHANOBJ_SRC:.c=.o)


#------------------------------------------------------------------------
#--- Expproc Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
EXPPROC_HDR=                    \
		expQfuncs.h	\
                commfuncs.h 	\
                parser.h 	\
                expDoneCodes.h \
                hostMsgChannels.h \
		shrstatinfo.h   \
		shrexpinfo.h


EXPPROC_SRC=			\
                commfuncs.c 	\
                excepthandler.c \
		expQfuncs.c	\
                statfuncs.c 	\
                parser.c 	\
		daemon.c


EXPPROC_OBJ= $(EXPPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Roboproc Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
ROBOPROC_HDR=
ROBOPROC_SRC=
ROBOPROC_OBJ= $(ROBOPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Procproc Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
PROCPROC_HDR=			\
		procQfuncs.h

PROCPROC_SRC=			\
		procQfuncs.c

PROCPROC_OBJ= $(PROCPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Sendproc Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
SENDPROC_HDR=
SENDPROC_SRC=
SENDPROC_OBJ= $(SENDPROC_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Vnmr Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
VNMR_HDR=			\
		data.h
VNMR_SRC=
VNMR_OBJ= $(VNMR_SRC:.c=.o)

#------------------------------------------------------------------------
#--- Acquisition Sources & Headers that are needed for Recvproc
#------------------------------------------------------------------------
VWACQ_HDR=			\
		hostAcqStructs.h
VWACQ_SRC=
VWACQ_OBJ= $(VWACQ_SRC:.c=.o)

#------------------------------------------------------------------------
#-- Recvproc Source & Header files 
#------------------------------------------------------------------------
RECVPROC_HDR=			\
		dspfuncs.h

RECVPROC_SRC=			\
		dspfuncs.c	\
		recvcmds.c	\
		recvproc.c	\
		recvfuncs.c


RECVPROC_OBJ= $(RECVPROC_SRC:.c=.o)


#---- All Sources and headers required for compilation -----
ALLSRC= 				\
	$(CHANOBJ_SRC) $(CHANOBJ_HDR) 	\
	$(EXPPROC_SRC) $(EXPPROC_HDR)	\
	$(NCOMM_SRC_LIB) $(NCOMM_HDR_LIB) \
	$(PROCPROC_SRC) $(PROCPROC_HDR)  \
	$(RECVPROC_SRC) $(RECVPROC_HDR)  \
	$(ROBOPROC_SRC) $(ROBOPROC_HDR)  \
	$(SENDPROC_SRC) $(SENDPROC_HDR)  \
	$(VNMR_SRC) $(VNMR_HDR)		\
	$(VWACQ_SRC) $(VWACQ_HDR)
 
ALL_C_SRC = $(ALLSRC)

#LINTFILES= $(ALLSRC:.c=.ln)
 
std : $$(MAKEFILE) Source
	@( if [ ! -d $(OBJDIR)obj ]; then	\
	   mkdir $(OBJDIR)obj; 			\
	fi)
	( cd $(OBJDIR)obj;			\
	$(MAKE) -e -f ../$(MAKEFILE) \
	"CFLAGS = $(OPTIMIZE) -DDEBUG"		\
	"LDFLAGS = -L/vnmr/lib" \
	"OBJDIR=$(sun4objdir)"		\
	Recvproc )
	@echo "NMR_ID Recvproc complete -------------------------------------"

# for debug link all  objects into recvproc
dbx : Source
	@( if [ ! -d $(OBJDIR)dbx ]; then	\
	   mkdir $(OBJDIR)dbx; 			\
	fi)
	( cd $(OBJDIR)dbx;			\
	$(MAKE) -e -f ../$(MAKEFILE) \
	"CFLAGS = $(DEBUGOPT) -DDEBUG"	\
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"	\
             "EXPPROC_GET= $(EXPPROC_SGET)" 		\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)" 	\
	     "NCOMM_GET= $(NCOMM_SGET)" 		\
             "PROCPROC_SRC_DIR= $(PROCPROC_SCCS_SRC)"   \
             "PROCPROC_GET= $(PROCPROC_SGET)" 		\
             "RECVPROC_SRC_DIR= $(RECVPROC_SCCS_SRC)"   \
             "RECVPROC_GET= $(RECVPROC_SGET)" 		\
             "ROBOPROC_SRC_DIR= $(ROBOPROC_SCCS_SRC)"	\
             "ROBOPROC_GET= $(ROBOPROC_SGET)" 		\
             "SENDPROC_SRC_DIR= $(SENDPROC_SCCS_SRC)"   \
             "SENDPROC_GET= $(SENDPROC_SGET)" 		\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "VWACQ_SRC_DIR= $(VWACQ_SCCS_SRC)" 	\
	     "VWACQ_GET= $(VWACQ_SGET)" 		\
	Recvproc_dbx )
	@echo "NMR_ID Recvproc_dbx complete ----------------------------------"

WINDOWS : getsrc
	( $(MAKE) -e -f $(MAKEFILE) \
        "CC = gcc"                  \
	"CFLAGS = -DLINUX -D_ALL_SOURCE "		\
        "COMPILEDSP.c= gcc -c -O4 -DLINUX -D_ALL_SOURCE"    \
	"LDFLAGS = -rpath /vnmr/lib" \
        "LIBS= -lm -lsocket " \
	Recvproc_win)
	@echo "NMR_ID Recvproc complete -------------------------------------"


getsrc : 
	( $(MAKE) -e -f $(MAKEFILE) \
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"	\
             "EXPPROC_GET= $(EXPPROC_SGET)" 		\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)" 	\
	     "NCOMM_GET= $(NCOMM_SGET)" 		\
             "PROCPROC_SRC_DIR= $(PROCPROC_SCCS_SRC)"   \
             "PROCPROC_GET= $(PROCPROC_SGET)" 		\
             "RECVPROC_SRC_DIR= $(RECVPROC_SCCS_SRC)"   \
             "RECVPROC_GET= $(RECVPROC_SGET)" 		\
             "ROBOPROC_SRC_DIR= $(ROBOPROC_SCCS_SRC)"	\
             "ROBOPROC_GET= $(ROBOPROC_SGET)" 		\
             "SENDPROC_SRC_DIR= $(SENDPROC_SCCS_SRC)"   \
             "SENDPROC_GET= $(SENDPROC_SGET)" 		\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "VWACQ_SRC_DIR= $(VWACQ_SCCS_SRC)" 	\
	     "VWACQ_GET= $(VWACQ_SGET)" src )


cl : getsrc
	#cmode
	#load -C  -DDEBUG $(NCOMM_SRC_LIB)
	#load -C  -DDEBUG $(CHANOBJ_SRC)
	#load -C  -DDEBUG $(EXPPROC_SRC)
	#load -C  -DDEBUG $(PROCPROC_SRC)
	#load -C  -DDEBUG $(RECVPROC_SRC)
	#link
	#unres

clclean :
	#cmode
	#unload $(NCOMM_SRC_LIB)
	#unload $(CHANOBJ_SRC)
	#unload $(EXPPROC_SRC)
	#unload $(PROCPROC_SRC)
	#unload $(RECVPROC_SRC)

all: std dbx 
	@echo NMR_ID all Recvproc(s) complete


#SOLARIS: $$(MAKEFILE) Source
#	( SOLARIS="y"; export SOLARIS; $(MAKE) -e -f $(MAKEFILE) \
#	 "CPPFLAGS= -DSOLARIS"			\
#	 "LIBS= -lm -lsocket -lnsl"		\
#	 "WORKLIB= libAutoproc.a" Autoproc )
#	@echo "NMR_ID Autoproc for Solaris complete -------------------------"


# ---- Be sure True Source that we link to are upto date.
Source :
	( cd $(SRC_DIR); $(MAKE) -e -f $(MAKEFILE) \
             "EXPPROC_SRC_DIR= $(EXPPROC_SCCS_SRC)"	\
             "EXPPROC_GET= $(EXPPROC_SGET)" 		\
             "NCOMM_SRC_DIR= $(NCOMM_SCCS_SRC)" 	\
	     "NCOMM_GET= $(NCOMM_SGET)" 		\
             "PROCPROC_SRC_DIR= $(PROCPROC_SCCS_SRC)"   \
             "PROCPROC_GET= $(PROCPROC_SGET)" 		\
             "RECVPROC_SRC_DIR= $(RECVPROC_SCCS_SRC)"   \
             "RECVPROC_GET= $(RECVPROC_SGET)" 		\
             "ROBOPROC_SRC_DIR= $(ROBOPROC_SCCS_SRC)"	\
             "ROBOPROC_GET= $(ROBOPROC_SGET)" 		\
             "SENDPROC_SRC_DIR= $(SENDPROC_SCCS_SRC)"   \
             "SENDPROC_GET= $(SENDPROC_SGET)" 		\
             "VNMR_SRC_DIR= $(VNMR_SCCS_SRC)" 		\
	     "VNMR_GET= $(VNMR_SGET)" 			\
             "VWACQ_SRC_DIR= $(VWACQ_SCCS_SRC)" 	\
	     "VWACQ_GET= $(VWACQ_SGET)" src )

src : $$(MAKEFILE) $(ALLSRC)
	@echo Sources up to date...

Recvproc : $(RECVPROC_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ)
	(umask 2; $(LINK.c) -o $@  -L$(NCOMMDIR) $(RECVPROC_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ) -lncomm $(LIBS))
	( umask 2; cp $@ ..)
	@echo Recvproc is complete

Recvproc_dbx Recvproc_soldbx: $(RECVPROC_OBJ) $(NCOMM_OBJ_LIB) $(CHANOBJ_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ)
	(umask 2; $(LINK.c) -o $@  $(RECVPROC_OBJ) $(NCOMM_OBJ_LIB) $(CHANOBJ_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ) $(LIBS))
	( umask 2; cp $@ ..)
	@echo Recvproc is complete

Recvproc_win : $(RECVPROC_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ) $(NCOMM_OBJ_LIB) $(CHANOBJ_OBJ)
	(umask 2; $(LINK.c) -o Recvproc $(RECVPROC_OBJ) $(EXPPROC_OBJ) $(PROCPROC_OBJ) $(NCOMM_OBJ_LIB) $(CHANOBJ_OBJ) $(LIBS))
	@echo Windows Recvproc is complete


depend:	$$(MAKEFILE) getsrc
	@ echo making dependencies...
	@ grep '^#include' $(ALL_C_SRC) \
		| sed 's/<\([^>]*\)>/"\/usr\/include\/\1"/' \
		| sed 's/:[^"]*"\([^"]*\)".*/: \1/' \
		| sed 's/\.c/.o/' \
                | sed 's/\.y/.o/' \
                | sed 's/\.l/.o/' >makedepd
	@ ls -1 $(ALL_C_SRC) | awk "{ {len = length(\$$0)} {s2 = substr(\$$0, 1, len - 2)} {print s2 \".o: \", \$$0 >> \"makedepd\"} } "
	@ awk "{ if ( \$$2 !~ /\/usr\// ) { print \$$0; } }" makedepd | sort > makedep
	@ echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	@ echo '$$r makedep' >>eddep
	@ echo 'w' >>eddep
	@ cp $(MAKEFILE) $(MAKEFILE).bak
	@ ed - $(MAKEFILE) < eddep
	@ rm eddep makedep makedepd
	@ echo '# DEPENDENCIES MUST END AT END OF FILE' >> $(MAKEFILE)
	@ echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> $(MAKEFILE)
	@ echo '# see make depend above' >> $(MAKEFILE)

#--- Object Targets ----------------------------------------------

dspfuncs.o : dspfuncs.c
	-(umask 2; $(COMPILEDSP.c) $(@:.o=.c) )

$(ALLOBJS) : $(@:.o=.c)
	-(umask 2; $(COMPILE.c) $(@:.o=.c) )

$(RECVPROC_MAN_LIB) : $(@:.nr=.c)
	-(umask 2; mangen $(@:.nr=.c) ; nroff -man $@ > $(@:.nr=.man) )

$(RECVPROC_INSTALLMAN_LIB) : $(@:.2=.c)
	-(umask 2; mangen $(@:.2=.c) ; mv $(@:.2=.nr) $@ )

#------ makefile extraction via SCCS allways. -------
$(MAKEFILE) : 
	$(RECVPROC_SGET) $@

#------------  Source Extraction via SCCS or Links ---------------

$(RECVPROC_SRC) $(RECVPROC_HDR) : $$(RECVPROC_SRC_DIR)$$(@)
	$(RECVPROC_GET) $@

$(PROCPROC_SRC) $(PROCPROC_HDR) : $$(PROCPROC_SRC_DIR)$$(@)
	$(PROCPROC_GET) $@

$(SENDPROC_SRC) $(SENDPROC_HDR) : $$(SENDPROC_SRC_DIR)$$(@)
	$(SENDPROC_GET) $@

$(ROBOPROC_SRC) $(ROBOPROC_HDR) : $$(ROBOPROC_SRC_DIR)$$(@)
	$(ROBOPROC_GET) $@

$(NCOMM_SRC_LIB) $(NCOMM_HDR_LIB) $(CHANOBJ_SRC) $(CHANOBJ_HDR) : $$(NCOMM_SRC_DIR)$$(@)
	$(NCOMM_GET) $@

$(EXPPROC_SRC) $(EXPPROC_HDR) : $$(EXPPROC_SRC_DIR)$$(@)
	$(EXPPROC_GET) $@

$(VNMR_SRC) $(VNMR_HDR) : $$(VNMR_SRC_DIR)$$(@)
	$(VNMR_GET) $@

$(VWACQ_SRC) $(VWACQ_HDR) : $$(VWACQ_SRC_DIR)$$(@)
	$(VWACQ_GET) $@

# ---------  Manual dependences ------------- 
recvproc.nr:  recvproc.c

# DO NOT DELETE THIS LINE -- make depend uses it
# DEPENDENCIES MUST END AT END OF FILE
asyncIo.o:  asyncIo.c
asyncIo.o: eventHandler.h
asyncIo.o: listObj.h
chanLib.o:  chanLib.c
chanLib.o:  chanLib.h
chanLib.o: chanLibP.h
chanLib.o: eventHandler.h
chanLib.o: listObj.h
chanLibP.h: chanLib.h
chanLibP.h: sockets.h
chanLibP.o:  chanLibP.h
commfuncs.o:  commfuncs.c
commfuncs.o:  commfuncs.h
commfuncs.o: errLogLib.h
commfuncs.o: hostAcqStructs.h
commfuncs.o: hostMsgChannels.h
commfuncs.o: msgQLib.h
commfuncs.o: sockets.h
daemon.o:  daemon.c
data.o:  data.h
dspfuncs.o:  dspfuncs.c
dspfuncs.o:  dspfuncs.h
dspfuncs.o: dspfuncs.h
dspfuncs.o: errLogLib.h
dspfuncs.o: mfileObj.h
dspfuncs.o: shrMLib.h
dspfuncs.o: shrexpinfo.h
dspfuncs.o: shrstatinfo.h
errLogLib.o:  errLogLib.c
errLogLib.o:  errLogLib.h
eventHandler.o:  eventHandler.c
eventHandler.o:  eventHandler.h
eventHandler.o: eventHandler.h
eventHandler.o: eventQueue.h
eventHandler.o: listObj.h
eventQueue.o:  eventQueue.c
eventQueue.o:  eventQueue.h
eventQueue.o: eventQueueP.h
eventQueueP.h: eventQueue.h
eventQueueP.o:  eventQueueP.h
excepthandler.o:  excepthandler.c
excepthandler.o: errLogLib.h
expDoneCodes.o:  expDoneCodes.h
expQfuncs.o:  expQfuncs.c
expQfuncs.o:  expQfuncs.h
expQfuncs.o: errLogLib.h
expQfuncs.o: expQfuncs.h
expQfuncs.o: mfileObj.h
expQfuncs.o: shrMLib.h
expQfuncs.o: shrexpinfo.h
fdmask.o:  fdmask.c
hhashLib.o:  hhashLib.c
hhashLib.o:  hhashLib.h
hhashLib.o: errLogLib.h
hhashLib.o: hhashLib.h
hostAcqStructs.o:  hostAcqStructs.h
hostMsgChannels.o:  hostMsgChannels.h
ipcKeyDbm.h: shrMLib.h
ipcKeyDbm.o:  ipcKeyDbm.c
ipcKeyDbm.o:  ipcKeyDbm.h
ipcKeyDbm.o: ipcKeyDbm.h
ipcKeyDbm.o: shrMLib.h
ipcMsgQLib.o:  ipcMsgQLib.c
ipcMsgQLib.o:  ipcMsgQLib.h
ipcMsgQLib.o: errLogLib.h
ipcMsgQLib.o: ipcMsgQLib.h
listObj.o:  listObj.c
listObj.o:  listObj.h
listObj.o: listObj.h
mfileObj.o:  mfileObj.c
mfileObj.o:  mfileObj.h
mfileObj.o: mfileObj.h
msgQLib.h: ipcMsgQLib.h
msgQLib.h: shrMLib.h
msgQLib.o:  msgQLib.c
msgQLib.o:  msgQLib.h
msgQLib.o: chanLib.h
msgQLib.o: errLogLib.h
msgQLib.o: hostMsgChannels.h
msgQLib.o: mfileObj.h
msgQLib.o: msgQLib.h
parser.o:  parser.c
parser.o:  parser.h
parser.o: errLogLib.h
parser.o: hhashLib.h
parser.o: parser.h
procQfuncs.o:  procQfuncs.c
procQfuncs.o:  procQfuncs.h
procQfuncs.o: errLogLib.h
procQfuncs.o: mfileObj.h
procQfuncs.o: procQfuncs.h
procQfuncs.o: shrMLib.h
procQfuncs.o: shrexpinfo.h
recvcmds.o:  recvcmds.c
recvcmds.o: parser.h
recvfuncs.o:  recvfuncs.c
recvfuncs.o: chanLib.h
recvfuncs.o: data.h
recvfuncs.o: dspfuncs.h
recvfuncs.o: errLogLib.h
recvfuncs.o: expDoneCodes.h
recvfuncs.o: expQfuncs.h
recvfuncs.o: hostAcqStructs.h
recvfuncs.o: hostMsgChannels.h
recvfuncs.o: mfileObj.h
recvfuncs.o: msgQLib.h
recvfuncs.o: procQfuncs.h
recvfuncs.o: shrMLib.h
recvfuncs.o: shrexpinfo.h
recvfuncs.o: shrstatinfo.h
recvproc.o:  recvproc.c
recvproc.o: commfuncs.h
recvproc.o: errLogLib.h
recvproc.o: eventHandler.h
recvproc.o: hostMsgChannels.h
recvproc.o: msgQLib.h
recvproc.o: procQfuncs.h
recvproc.o: shrstatinfo.h
semLib.o:  semLib.c
semLib.o:  semLib.h
semLib.o: errLogLib.h
semLib.o: mfileObj.h
semLib.o: semLib.h
shrMLib.h: mfileObj.h
shrMLib.o:  shrMLib.c
shrMLib.o:  shrMLib.h
shrMLib.o: shrMLib.h
shrexpinfo.o:  shrexpinfo.h
shrstatinfo.h: hostAcqStructs.h
shrstatinfo.o:  shrstatinfo.h
signals.o:  signals.c
sockets.o:  sockets.c
sockets.o:  sockets.h
sockets.o: sockets.h
statfuncs.o:  statfuncs.c
statfuncs.o: errLogLib.h
statfuncs.o: hostAcqStructs.h
statfuncs.o: mfileObj.h
statfuncs.o: shrMLib.h
statfuncs.o: shrstatinfo.h
# DEPENDENCIES MUST END AT END OF FILE
# IF YOU PUT STUFF HERE IT WILL GO AWAY
# see make depend above
